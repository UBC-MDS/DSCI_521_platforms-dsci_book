---
title: Organization of Data Science projects and some useful tools
jupyter: python3
---

## Learning outcomes

{{< include ../learning_objectives/lo-ch-08.qmd >}}

:::{.activity}
::::{.activity-header}
## Lecture 8 Activity 1
::::
::::{.activity-container}
Let's remember some concepts from last class

True or False
1. The command `pwd` prints the working directory as a relative path
2. The home directory can be the current working directory
3. In general, your home directory is the root directory
::::
:::


# Project organization

Broadly speaking you will find two different ways of organizing a project: as a data analysis project and code project. Neither of this options is rigid enough to can give you here a exhaustive list of folder types and files you would expect on this projects. You will spend some time exploring different examples.
However, we can work with a general structure:


```bash
project/
├── data/              *.csv
│   ├── processed/
│   └── raw/
├── reports/           *.ipynb *.Rmd
├── src/               *.py *.R
├── doc/               *.md
├── README.md
└── environment.yaml (or renv.lock)
```

**data**
If your original data file is stored as part of the repository and should never be overriden. That is why the original files are stored in a sub-folder called `raw`.

**reports**
The documentation is the biggest difference between data analysis projects and software projects. Would you expect a report on a software project? In general notebooks and other literate programming documents (that prioritize narrative and storytelling) are the favourite options to share data analysis results [1]. We will learn more about reports literate programming documents in lecture 7. You will create your first data science project in DSCI 522.
Software projects are mostly focused in the development of tools and in this cases other types of documentation (docstrings, vignettes, readtheDocs, JupyterBooks) are the favourite source of documentation for this kinf of projects. We will learn more about them in DSCI 524.

**`src`**
and for R the `src` directory is often just called `R/`,
whereas for Python is has the same name as the project (`project`).
You will learn more about project hierarchy when making packages.

**doc**
Documentation

**README.md**
The README file is probably the first file a potential user/contributor will read when you

**environment**
Speficying the computational environment will help you to ensure the reproducibility of yuour analysis. We will learn how to create this environments in lecture 6 and practice on lab 3.

<!--
A place for everything, everything in its place.

Benjamin Franklin



---

![beer_messy_tidy](img/beer_messy_tidy.png)

---

![files_messy_tidy](img/files_messy_tidy.png)

## Face it...

- There are going to be files

- LOTS of files

- The files will change over time

- The files will have relationships to each other

- It'll probably get complicated

## Mighty weapon

- File organization and naming is a mighty weapon against chaos

- Make a file's name and location VERY INFORMATIVE about what it is, why it exists, how it relates to other things

- The more things are self-explanatory, the better

- READMEs are great, but don't document something if you could just make that thing self-documenting by definition


## Attribution:

- Slides borrowed from the [Data Carpentry](https://datacarpentry.org/) [Reproducible Science Workshop](https://datacarpentry.org/rr-organization1/)

-->


---

:::{.activity}
::::{.activity-header}
## Lecture 8 Activity 2
::::
::::{.activity-container}
Which set of file(name)s do you want at 3 a.m. before a deadline?

A. `Joe’s Filenames Use Spaces and Punctuation.xlsx`
B. `figure 1.png`
C. `JW7d^(2sl@deletethisandyourcareerisoverWx2*.txt`
D. `2014-06-08_abstract-for-sla.docx`
E. `myabstract.docx`
::::
:::




---

# Filenames - best practices

## Names matter

![cheers](img/cheers.png)

## What works, what doesn't?

**NO**

~~~
myabstract.docx
Joe’s Filenames Use Spaces and Punctuation.xlsx
figure 1.png
fig 2.png
JW7d^(2sl@deletethisandyourcareerisoverWx2*.txt
~~~

**YES**

~~~
2014-06-08_abstract-for-sla.docx
joes-filenames-are-getting-better.xlsx
fig01_talk-scatterplot-length-vs-interest.png
fig02_talk-histogram-attendance.png
1986-01-28_raw-data-from-challenger-o-rings.txt
~~~

## Three principles for (file) names

1. Machine readable

2. Human readable

3. Plays well with default ordering

## Awesome file names :)

![awesome_names](img/awesome_names.png)

# Machine readable

## Machine readable

- Regular expression and globbing friendly
    + Avoid spaces, punctuation, accented characters, case sensitivity

- Easy to compute on
    + Deliberate use of delimiters

## Globbing

**Excerpt of complete file listing:**

![plasmid_names](img/plasmid_names.png)

<hr>

**Example of globbing to narrow file listing:**

![plasmid_names](img/plasmid_glob.png)


## Same using Mac OS Finder search facilities

<center>
![plasmid_mac_os_search](img/plasmid_mac_os_search.png)
</center>

## Same using regex in R

<center>
![plasmid_regex](img/plasmid_regex.png)
</center>

## Punctuation {.smaller}

Deliberate use of `"-"` and `"_"` allows recovery of meta-data from the filenames:

- `"_"` underscore used to delimit units of meta-data I want later
- `"-"` hyphen used to delimit words so my eyes don't bleed

<center>
![plasmid_delimiters](img/plasmid_delimiters.png)
</center>

<hr>

<center>
![plasmid_delimiters_code](img/plasmid_delimiters_code.png)
</center>

This happens to be R but also possible in the shell, Python, etc.

## Recap: machine readable

- Easy to search for files later

- Easy to narrow file lists based on names

- Easy to extract info from file names, e.g. by splitting

- New to regular expressions and globbing? be kind to yourself and avoid
    + Spaces in file names
    + Punctuation
    + Accented characters
    + Different files named `foo` and `Foo`

# Human readable

## Human readable

- Name contains info on content

- Connects to concept of a *slug* from semantic URLs

## Example

**Which set of file(name)s do you want at 3 a.m. before a deadline?**

![human_readable_not_options](img/human_readable_not_options.png)

## Embrace the slug

<div class="columns-2">
slug filenames
![](img/slug_filenames.png)

slug
![](img/slug.jpg)
</div>

## Recap: Human readable

Easy to figure out what the heck something is, based on its name

# Plays well with default ordering

## Plays well with default ordering

- Put something numeric first

- Use the ISO 8601 standard for dates

- Left pad other numbers with zeros

## Examples

**Chronological order:**

![chronological_order](img/chronological_order.png)

<hr>

**Logical order:** Put something numeric first

![logical_order](img/logical_order.png)

## Dates

Use the ISO 8601 standard for dates: YYYY-MM-DD

![chronological_order](img//chronological_order.png)

##

<center>
![iso_psa](img/iso_8601.tiff)
</center>

## Comprehensive map of all countries in the world that use the MM-DD-YYYY format

<center>
![map_mmddyyy](img/map_mmddyyy.tiff)
</center>

<br>

From https://twitter.com/donohoe/status/597876118688026624.

## Left pad other numbers with zeros

<center>
![logical_order](img/logical_order.png)
</center>

<br>

If you don’t left pad, you get this:

~~~
10_final-figs-for-publication.R
1_data-cleaning.R
2_fit-model.R
~~~

which is just sad :(

## Recap: Plays well with default ordering

- Put something numeric first

- Use the ISO 8601 standard for dates

- Left pad other numbers with zeros

## Recap

## Three principles for (file) names

1. Machine readable

2. Human readable

3. Plays well with default ordering

## Pros

- Easy to implement NOW

- Payoffs accumulate as your skills evolve and projects get more complex

## Go forth and use awesome file names :)

![chronological_order](img/chronological_order.png)

<br>

![logical_order](img/logical_order.png)

---

**Lecture Activities**

1. Which of the following items describe three important rules for naming files on a computer? Select all correct answers.


A. File name parts should be easy to extract programmatically
B. Humans would understand something about file contents by looking at their names
C. Files with appropriate names would be nicely organized by default
D. File names should always use lower-case letters
E. Underscores are the only allowed separator in file names
F. Human understanding of file names should be prioritized over machine understanding

2. Match each explanation with its corresponding file naming principle:

G.  By following this principle, we are able to use tools such as regular expressions and file-name globbing to search, select and manipulate files using tools such as the unix shell, R and Python.

H. By following this principle, we can have a good idea of what is inside files without having to open them (saves us time) and when we come back to work on a project we haven't worked on in a while it is much easier for us to remember what we were working on and get started again.


I. By following this principle, we can make our files more organized and understandable, and files more findable. Ordered lists will be sorted into a logical order and so it is easy to orient yourself in the directory and find the files you want to find.

J. By following this principle, we will be sure that our files have the appropriate formatting in terms of their content. Such files will be ready for subsequent analysis in a data science pipeline.


3. Which of the following are GOOD date formats to use in a filename?

K. 2020-01-26T0233
L. 20200126T0233
M. 2020-01-26

## References

[1] Kery, M. B., Radensky, M., Arya, M., John, B. E., & Myers, B. A. (2018, April). The story in the notebook: Exploratory data science using a literate programming tool. In Proceedings of the 2018 CHI Conference on Human Factors in Computing Systems (pp. 1-11).
