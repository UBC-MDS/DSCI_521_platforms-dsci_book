---
title: 'Quarto, RMarkdown, and Jupyter Slides'
jupyter: python3
---

## Learning outcomes

{{< include ../learning_objectives/lo-ch-06.qmd >}}

**Platform in focus** Jupyter Lab, RStudio IDE, Quarto

:::{.activity}
::::{.activity-header}
## Lecture 6 Activity 1
::::
::::{.activity-container}
 Check the following data science analysis.
::::
:::


## Quarto documents markdown flavour

In lecture 7 we have been learning about RMarkdown. Recently, has been released [Quarto](https://quarto.org/). Adding capabilities to R Markdown  it also uses Pandoc Markdown, but we will talk about it later: https://quarto.org/docs/authoring/markdown-basics.html

In brief we are going to learn that you can create a `gfm` formatted document in Quarto. This means that you can use this type of file to create a `README.md` that will perfectly render on GitHub.

#### Jupyter Notebooks for Python and RMarkdown for R?

Even if the purpose of using a Jupyter Notebook and an RMarkdown is similar there are major differences to be considered. The first one is that Jupyter Notebooks has been created for Python (even if there exist an R ikernel) and that RMarkdown has been created for R (even if can be used with Python through the `reticulate` package). There is a third new option, **Quarto documents** (`.qmd`), that can be open in RStudio, VS Code and JupyterLab at the same time and be used with Python, R or Julia.

A single `.qmd` file is processed by a single engine running R, Python, or Julia. The trick is that an `.qmd` file running R can run Python via the `reticulate` R package meanwhile a `.qmd` running Python can run R via the `rpy2` Python package. We will learn more about Quarto soon, but first let's think a bit about how we write text in the notebooks.

This being said you have to consider that:
> Note that if you are using either the Jupyter or Knitr computational engine you will likely be better off using JupyterLab or VS Code (for .ipynb notebooks) or RStudio (for .qmd documents) as these environments provide code-completion, incremental cell execution, and other useful tools for working with executable code.

> Quarto Docs - Text editors (https://quarto.org/docs/tools/text-editors.html)








![alttag](img/rstudio-conf-2022-quarto.png)
*Quarto documents are created with text and Python, R and/or Julia code*


:::{.activity}
::::{.activity-header}
## Lecture 6 Activity 2
::::
::::{.activity-container}
Why using R Markdown and Quarto documents can make your work more reproducible?
- `.Rmd` and `.qmd` are plain-text files, they can be opened and edited with almost any editor.
- Including text in the final reports created involves a more detailed explanation of your work than only commenting the code.
- They use pandoc to render the files in different formats.
- Because they create a versatile `.md` file as intermediate step.
- They allow running code as inline code or in code chuncks.
- The code chunks could be run in any order.
::::
:::

## Presentations with JupyterLab, RMarkdown and Quarto

You can create a great set of slides to share your results with others! We are going to use the framework `reveal.js`. RMarkdown most popular slides are created with a package called `xaringan`. Since Quarto appear, it is possible to create slides using `reveal.js` that is the same framework that is available by default in Jupyter Notebooks. Anyway, it would be possible to generate `reveal.js` presentations with RMarkdown if you install the `revealjs` package and follow [these instructions](https://bookdown.org/yihui/rmarkdown/revealjs.html).



#### Create your slides using Quarto

If you are using Jupyter Notebooks it is quite straightforward to create your slides.
You can use Jupyter Lab interface too with the same purpose.
You can read more [about it here](https://towardsdatascience.com/5-slides-for-tips-on-presentation-mode-in-jupyter-notebook-f858b15fff4f)

![Jupyter Slides](img/jupyter-slides.gif)



You can crea

Clicking here you can have [an example](https://quarto.org/docs/presentations/revealjs/demo/#/title-slide) of what you can do with Quarto presentations using `reveal.js` framework.




**Lecture x**

Take 5 minutes of the class and convert one of your `.Rmd`, `.qmd` or `.ipynb` to a set of slides.

You can convert the slides manually or look into the
[jupytext](https://jupytext.readthedocs.io/en/latest/install.html) or
`quarto convert` tools
to do an initial file conversion.

<!-- ## Presentations with R Markdown via xaringan

One of the templates you can use
is to create a "Ninja presentation" using xaringan.
I will let the package author explain why it is named that way:

> [Sharingan is] an R package for creating slideshows with remark.js through R Markdown.
> The package name xaringan comes from Sharingan,
> a dōjutsu in Naruto with two abilities:
> the "Eye of Insight" and the "Eye of Hypnotism".
> A presentation ninja should have these basic abilities,
> and I think remark.js may help you acquire these abilities,
> even if you are not a member of the Uchiha clan.
>
> https://github.com/yihui/xaringan

The xaringan template is great and lists everything you can do
so I won't repeat everything here.
Briefly,
slides are separated with `---`,
and have class labels:

- `inverse` inverts the colors
- `center` centers horizontally
- `middle` centers vertically

Inside the slides,
you can use R Markdown syntax
with some special syntax,
such as `.pull-left[]` and `.pull-right[]`
to create to columns of text.
It has support for some interactive features
such as table pagination.
You can also style the slides
by using any of the themes listed by `names(xaringan:::list_css())`,
e.g.

```yaml
---
output:
  xaringan::moon_reader:
    css: [metropolis, metropolis-fonts]
---
```

For more customization,
you can download `xaringanthemer`
(and it's dependency `showtext`, which does not seem to install automatically):

```R
install.packages(c("xaringanthemer", "showtext"))
```

And then select to create a "themed" Ninja presentation
via the same process as above.
Now there is a code chunk added
where you can select the different colors
to use for your presentation. -->

<!-- ## Sharing xaringan

We can't use HTML preview with xaringan because it relies on external web resources
that are not loaded correctly with the preview trick.
This means that there is no way for us to **privately** preview out presentation.
However,
if we are looking to share our slides **publicly**,
this is still possible via GitHub Pages.

GitHub Pages can create a public URL for any GitHub repository that you own,
and automatically renders any HTML files within this repo.
You can find [a short tutorial on how to setup Pages for your repo here](https://pages.github.com/),
but in brief you need to go to the settings page of your GitHub repo,
scroll down to where it says "GitHub Pages" on the main settings page
and select which branch you want to publish.
It is common to create a separate branch called `gh-pages`
and keep all files that should be available to the public on this branch,
but if you just want to experiment in and otherwise empty repo,
it is fine to use the master branch.

By default,
GitHub pages will render a `README.md` file or an `index.html` file
if you have these at the root of your repo.
So in our case,
we could name our presentation file `index.html`
and put it at the root of the repo,
and then share the GH Pages link of the repo with others
(you can find this link in the settings page where you enabled GH Pages).

You could create links to other files yourself,
but commonly a framework is used to automate this
and add many other functions to your GH Pages,
such as Jekyll or Hugo.
A rewarding way to learn how to work with GH Pages
is to create a personal web page.
I used [Hugo via the "Academic" theme](https://wowchemy.com/docs/install-locally/) to create my site,
and I think it was great
and their documentation is comprehensive albeit a bit long.
[Distill](https://rstudio.github.io/distill) package can also help you to create webpages and blogs using R Markdown. -->

# Creating presentations with JupyterLab

JupyterLab has support for presentations via another JavaScript framework:
reveal.js (which is the same framework that Quarto uses).
To mark which code cells should be part of the presentation,
we can go to the property inspector (the settings wheel in the left side panel)
and then select the slide type from the dropdown menu.
Once you are done marking up slides,
you can export them to
reveal.js presentations are two dimensional,
with slides in the horizontal direction
and sub-slides in the vertical direction.

- `Slide`: Standard slide navigated to via left and right arrows.
- `Sub-slide`: Sub-topic of a slide, navigated to via up and down arrows.
- `Fragment`: Animated in as part of the previous slide, could e.g. be a bullet point in a list.
- `-` (or empty): Will appear in the same cell as the previous slide.
- `Notes`: Speaker notes are visible when you press `t`
- `Skip`: Not included

You will notice that images that are referenced via `![]()` or `<img>` do not show up in the exported slides
(or the exported HTML).
Until [this issue](https://github.com/jupyter/nbconvert/issues/1057) is fixed,
a workaround is to paste the image into a Markdown cell
and it will be included as an attachment,
which shows up fine in HTML and slide exports.
