[
  {
    "objectID": "readings/readings-ch-08.html",
    "href": "readings/readings-ch-08.html",
    "title": "DSCI 521: Computing Platforms for Data Science",
    "section": "",
    "text": "Regex\nRegex test\nPracticing Regex\nThree tips for posting good questions to R-help and Stack Overflow\nHow to create a Minimal, Complete, and Verifiable example\nGood Enough Practices in Scientific Computing\n.gitignore"
  },
  {
    "objectID": "readings/readings-ch-06.html",
    "href": "readings/readings-ch-06.html",
    "title": "DSCI 521: Computing Platforms for Data Science",
    "section": "",
    "text": "R Markdown presentations with xaringan\nJupyter presentations\nQuarto Presentations"
  },
  {
    "objectID": "readings/readings-ch-04.html",
    "href": "readings/readings-ch-04.html",
    "title": "DSCI 521: Computing Platforms for Data Science",
    "section": "",
    "text": "Quarto Guides\nGetting Started with GitHub Pages"
  },
  {
    "objectID": "readings/readings-ch-01.html",
    "href": "readings/readings-ch-01.html",
    "title": "DSCI 521: Computing Platforms for Data Science",
    "section": "",
    "text": "The Unix Shell: Navigating Files and Directories or The shell\nIntroduce yourself to Git\nConnect to GitHub\nJupyter Notebook Tutorial: The Definitive Guide"
  },
  {
    "objectID": "learning_objectives/lo-ch-06.html",
    "href": "learning_objectives/lo-ch-06.html",
    "title": "DSCI 521: Computing Platforms for Data Science",
    "section": "",
    "text": "Understand how Quarto extend RMarkdown documents functionalities.\nExplore different data science products to communicate your results: slides, blogs and books.\nCreate slides using Jupyter Notebook and Quarto slides with reveal.js\nCreate a Jupyter Book and a Quarto books.\nCreate a Quarto Blog.\nSharing rendered HTML files publicly via GitHub Pages."
  },
  {
    "objectID": "learning_objectives/lo-ch-04.html",
    "href": "learning_objectives/lo-ch-04.html",
    "title": "DSCI 521: Computing Platforms for Data Science",
    "section": "",
    "text": "Use the quarto terminal command to create different quarto projects\nCreate and edit a Quarto website\nDiscover how GitHub can be used to serve static websites\nModify a GitHub repository to publish a website"
  },
  {
    "objectID": "learning_objectives/lo-ch-02.html",
    "href": "learning_objectives/lo-ch-02.html",
    "title": "DSCI 521: Computing Platforms for Data Science",
    "section": "",
    "text": "Implement SSH authentication\nDifferentiate between the use of GitHub as a remote hosting service for version control and Git as a version control system.\nCreate a Git repository.\nImplement Git’s clone, add, status, commit, pull, and push operations on the command line and their equivalent use in VS Code.\nUnderstand what implies using the staging area in a Git workflow.\nRecognize the commit as the primary building block for storing a project version characterized by an attached message and a hash that serves as a unique identifier."
  },
  {
    "objectID": "learning_objectives/lo-ch-00.html",
    "href": "learning_objectives/lo-ch-00.html",
    "title": "DSCI 521: Computing Platforms for Data Science",
    "section": "",
    "text": "Launch JupyterLab\nUse the Notebook interface inside Jupyterlab\nKnow your way around the JupyterLab user interface"
  },
  {
    "objectID": "lectures/7-virtual-environments.html",
    "href": "lectures/7-virtual-environments.html",
    "title": "Virtual environments",
    "section": "",
    "text": "Understand what is a computational environment and how can ensure the reproducibility of a project\nDifferenciate Python, Anaconda, MiniConda, Conda and pip\nManage packages and environments in Python using Conda\nManage packages and environments in R using renv",
    "crumbs": [
      "Home",
      "Lecture 7: Virtual environments"
    ]
  },
  {
    "objectID": "lectures/7-virtual-environments.html#lecture-objectives",
    "href": "lectures/7-virtual-environments.html#lecture-objectives",
    "title": "Virtual environments",
    "section": "",
    "text": "Understand what is a computational environment and how can ensure the reproducibility of a project\nDifferenciate Python, Anaconda, MiniConda, Conda and pip\nManage packages and environments in Python using Conda\nManage packages and environments in R using renv",
    "crumbs": [
      "Home",
      "Lecture 7: Virtual environments"
    ]
  },
  {
    "objectID": "lectures/7-virtual-environments.html#lecture-7-activity-1",
    "href": "lectures/7-virtual-environments.html#lecture-7-activity-1",
    "title": "Virtual environments",
    "section": "Lecture 7 Activity 1",
    "text": "Lecture 7 Activity 1",
    "crumbs": [
      "Home",
      "Lecture 7: Virtual environments"
    ]
  },
  {
    "objectID": "lectures/7-virtual-environments.html#conda",
    "href": "lectures/7-virtual-environments.html#conda",
    "title": "Virtual environments",
    "section": "Conda",
    "text": "Conda\nconda is an open source package and environment management system for any programming language; though it is the most popular in the python community. Anaconda is a data science platform for Python that comes with a lot of packages by default. Unlike Anaconda, Miniconda doesn’t come with any installed packages by default, and we can pick and choose which ones we want. Both include Python and conda.\nFor example, the MDS Python installation instructions had you install Miniconda. All flavors of *conda give you the conda function in the terminal.\n\nManaging Conda\nLet’s first start by checking if conda is installed.\nconda --version\nwhich conda\nTo see which conda commands are available, type conda --help. To see the full documentation for any command of these commands, type the command followed by --help. For example, to learn about the conda update command:\nconda update --help\nLet’s update our conda to the latest version. Note that you might already have the latest version since we downloaded it recently.\nconda update conda\nYou will see some information about what there is to update and be asked if you want to confirm. The default choice is indicated with [], and you can press Enter to accept it. It would look similar to this:\nUsing Anaconda Cloud api site https://api.anaconda.org\nFetching package metadata: ....\n.Solving package specifications: .........\n\nPackage plan for installation in environment //anaconda:\n\nThe following packages will be downloaded:\n\n    package                    |            build\n    ---------------------------|-----------------\n    conda-env-2.6.0            |                0          601 B\n    ruamel_yaml-0.11.14        |           py27_0         184 KB\n    conda-4.2.12               |           py27_0         376 KB\n    ------------------------------------------------------------\n                                           Total:         560 KB\n\nThe following NEW packages will be INSTALLED:\n\n    ruamel_yaml: 0.11.14-py27_0\n\nThe following packages will be UPDATED:\n\n    conda:       4.0.7-py27_0 --&gt; 4.2.12-py27_0\n    conda-env:   2.4.5-py27_0 --&gt; 2.6.0-0\n    python:      2.7.11-0     --&gt; 2.7.12-1\n    sqlite:      3.9.2-0      --&gt; 3.13.0-0\n\nProceed ([y]/n)? y\n\nFetching packages ...\nconda-env-2.6. 100% |################################| Time: 0:00:00 360.78 kB/s\nruamel_yaml-0. 100% |################################| Time: 0:00:00   5.53 MB/s\nconda-4.2.12-p 100% |################################| Time: 0:00:00   5.84 MB/s\nExtracting packages ...\n[      COMPLETE      ]|###################################################| 100%\nUnlinking packages ...\n[      COMPLETE      ]|###################################################| 100%\nLinking packages ...\n[      COMPLETE      ]|###################################################| 100%\nIn this case, conda itself needed to be updated, and along with this update some dependencies also needed to be updated. There is also a NEW package that was INSTALLED in order to update conda. You don’t need to worry about remembering to update conda, it will let you know if it is out of date when you are installing new packages.",
    "crumbs": [
      "Home",
      "Lecture 7: Virtual environments"
    ]
  },
  {
    "objectID": "lectures/7-virtual-environments.html#managing-environments",
    "href": "lectures/7-virtual-environments.html#managing-environments",
    "title": "Virtual environments",
    "section": "Managing Environments",
    "text": "Managing Environments\n\nWhat is a conda environment and why is it so useful?\nUsing conda, you can create an isolated python environment for your project. An environment is a set of packages that can be used in one or multiple projects. There are several major benefits of using environments:\n\nYou can guarantee that someone else can reproduce your project by specifying which package versions your used and making it easy for others to install the same versions.\nIf two of your projects relies on different versions of the same package, you can install these in different environments.\nIf you want to play around with a new package, you don’t have to change the packages you use for your data analysis and risk messing something up.\nWhen you develop your own packages, it is essential to use environments, since you want to to make sure you know exactly which packages yours depend on, so that it runs on other systems than your own.\n\nThe default environment is the base environment, which contains only the essential packages from Miniconda (assuming you installed Miniconda). You can see that your shell’s prompt string is prefaced with (base) when you are inside this environment. In the setup guide, we gave your instructions for how to activate this environment by default every time you open Bash. There are two ways of creating a conda environment.\n\nManual specifications of packages.\nAn environment file in YAML format (environment.yaml).\n\n\n\nCreating environment by manually specifying packages\nWe can create test_env conda environment by typing conda -n &lt;name-of-env&gt;. However, it is often useful to specify more than just the name of the environment, e.g. the channel from which to install packages, the Python version, and a list of packages to install into the new env. In the example below, I am creating the test_env environment that uses python 3.7 and a list of libraries: jupyterlab and pandas. I am explicitely installing my packages from the conda-forge repository (also part of the MDS setup instructions).\nconda create -n test_env -c conda-forge python=3.7 jupyterlab pandas=1.0.2\nconda will solve any dependencies between the packages like before and create a new environment with those packages. Usually, we don’t need to specify the channel, but in this case I want to get the very latest version of these packages, and they are made available in conda-forge before they reach the default conda channel.\nTo activate this new environment, you can type conda activate test_env (and conda deactivate for deactivating). Since you will do this often, we created an alias shortcut ca that you can use to activate environments. To know the current environment that you’re in you can look at the prefix of the prompt string in your shell which now changed to (test_env). And to see all your environments, you can type conda env list.\n\nRemoving enviornments\nIf you are creating environments for practice, or you want to recreate an environment you can delete your conda enviornments by:\n# look for all the installed enviornments\nconda env list\n# delete an enviornment\nconda remove --name ENV_NAME --all\nSimiliarly, all your enviornments are installed within your miniconda3 folder, which is typically located in ~/miniconda3 In here you will see an env folder. If you delete the folder with the corresponging enviornment name (e.g., with rm) you can also delete an enviornment this way too.\n\n\n\nSharing Environments with others\nTo share an environment, you can export your conda environment to an environment file, which will list each package and its version in the format package=version=build.\nExporting your environment to a file called environment.yaml (it could be called anything, but this is the conventional name and using it makes it easy for others to recognize that this is a conda env file, the extension can be either .yaml or .yml):\nconda env export -f environment.yaml\nRemember that .yaml files are plain text, so you can use a text editor such as VS Code to open them. If you do, you will realize that this environment file has A LOT more packages than jupyterlab and pandas. This is because the default behavior is to also list the dependencies that were installed together with these packages, e.g. numpy. This is good in the sense that it gives an exact copy of everything in your environment.\nHowever, some dependencies might differ between operating systems, so this file might not work with someone from a different OS. To remedy this, you can append the --from-history flag, which look at the history of the packages you explicitly told conda to install and only list those in the export. The required dependencies will then be handled in an OS-specific manner during the installation, which guarantees that they will work across OSes. This environment.yaml file would be much shorter and look something like this:\nname: test_env\nchannels:\n  - conda-forge\n  - defaults\ndependencies:\n  - conda\n  - python=3.7\n  - pandas==1.0.2\n  - jupyterlab\nImportantly, this will not include the package version unless you included it when you installed with the package==version syntax. For an environment to be reproducible, you NEED to add the version string manually.\n\nLecture\n\n\n\nCreating environment from an environment file\nNow, let’s install environment.yaml environment file above so that we can create a conda environment called test_env.\n$ conda env create --file environment.yaml\n\n\nCopying an environment\nWe can make an exact copy of an environment to an environment with a different name. This maybe useful for any testing versus live environments or different Python 2.7 versions for the same packages. In this example, test_env is cloned to create live_env.\nconda create --name live_env --clone test_env\n\n\nDeleting an environment\nSince we are only testing out our environment, we will delete live_env to remove some clutter. Make sure that you are not currently using live_env.\nconda env remove -n live_env\n\n\nMaking environments work well with JupyterLab\nIn brief, you need to install the ipykernel package in any new environment your create, and the nb_conda_kernels package needs to be installed in the environment where JupyterLab is installed.\nBy default, JupyterLab only sees the conda environment where it is installed. Since it is quite annoying to install JupyterLab and its extensions separately in each environment, there is a package called nb_conda_kernels that makes it possible to have a single installation of JupyterLab access kernels in other conda environments. This package needs to be installed in the conda environment where JupyterLab is installed.\nLastly, you also need to install a kernel in the new conda environment so that it can be detected by nb_conda_kernels. This kernel can be installed via the package ipykernel for Python and the r-irkernel package for R (more info in the nb_conda_kernels README).",
    "crumbs": [
      "Home",
      "Lecture 7: Virtual environments"
    ]
  },
  {
    "objectID": "lectures/7-virtual-environments.html#managing-packages",
    "href": "lectures/7-virtual-environments.html#managing-packages",
    "title": "Virtual environments",
    "section": "Managing Packages",
    "text": "Managing Packages\n\nSeeing what packages are available\nWe will now check packages that are available to us. The command below will list all the packages in an environment, in this case test_env. The list will include versions of each package, the specific build, and the channel that the package was downloaded from. conda list is also useful to ensure that you have installed the packages that you desire.\nconda list\n# packages in environment at //miniconda/envs/test_env:\n#\nUsing Anaconda Cloud api site https://api.anaconda.org\nblas                      1.1                    openblas    conda-forge\nca-certificates           2016.9.26                     0    conda-forge\ncertifi                   2016.9.26                py27_0    conda-forge\ncycler                    0.10.0                   py27_0    conda-forge\nfreetype                  2.6.3                         1    conda-forge\nfunctools32               3.2.3.2                  py27_1    conda-forge\nlibgfortran               3.0.0                         0    conda-forge\n\n\nSearching for a certain package\nSome packages might not be available in conda, but are available in pypi. For example, we will search for rasterio within the anaconda cloud. It is not necessary to create an account with anaconda cloud, unless you’d like to contribute in the future when you are pro with conda.\nIn this example, we will use rasterio from conda-forge. The anaconda cloud page for rasterio will show how to install the package, compatible OS, individual files for that package, etc.\nWith conda you can do this search within the command line:\nconda search rasterio\nUsing Anaconda Cloud api site https://api.anaconda.org\nRun 'anaconda show &lt;USER/PACKAGE&gt;' to get more details:\nPackages:\n     Name                      |  Version | Package Types   | Platforms\n     ------------------------- |   ------ | --------------- | ---------------\n     IOOS/rasterio             |    1.0a2 | conda           | linux-64, win-32, win-64, osx-64\n     Terradue/rasterio         |   0.32.0 | conda           | linux-64\n                                          : Fast and direct raster I/O for use with Numpy and SciPy\n     anaconda/rasterio         |   0.36.0 | conda           | linux-64, win-32, win-64, linux-32, osx-64\n     conda-forge/rasterio      |    1.0a2 | conda           | linux-64, win-32, win-64, osx-64\n                                          : Rasterio reads and writes geospatial raster datasets\n     dharhas/rasterio          |   0.23.0 | conda           | win-64\n                                          : Rasterio reads and writes geospatial raster datasets.\n     erdc/rasterio             |   0.23.0 | conda           | win-64\n                                          : Rasterio reads and writes geospatial raster datasets.\n     jesserobertson/rasterio   |   0.23.0 | conda           | linux-64, linux-32, osx-64\n     jhamman/rasterio_to_xarray | 2016.03.16-1558 | ipynb           |\n                                          : IPython notebook\n     krisvanneste/rasterio     |   0.26.0 | conda           | win-64\n     ocefpaf/rasterio          |   0.19.1 | conda           | linux-64, osx-64\n     omgarcia/rasterio         |   0.25.0 | conda           | linux-64\n     pypi/rasterio             |   0.13.2 | pypi            |\n                                          : Fast and direct raster I/O for Python programmers who use Numpy\n     robintw/rasterio          |   0.35.1 | conda           | osx-64\n                                          : Rasterio reads and writes geospatial raster datasets\n     sgillies/rasterio         |     0.15 | conda           | osx-64\n     ztessler/rasterio         |   0.31.0 | conda           | osx-64\n                                          : Fast and direct raster I/O for use with Numpy and SciPy\nFound 15 packages\n\n\nInstalling conda package\nUnder the name column of the result in the terminal or the package column in the Anaconda Cloud listing, shows the necessary information to install the package. e.g. conda-forge/rasterio. The first word list the channel that this package is from and the second part shows the name of the package.\nTo install the latest version available within the channel, do not specify in the install command. We will install version 0.35 of rasterio from conda-forge into test_env in this example. Conda will also automatically install the dependencies for this package.\nconda install -c conda-forge rasterio=0.35\nIf you have a few trusted channels that you prefer to use, you can pre-configure these so that everytime you are creating an environment, you won’t need to explicitly declare the channel.\nconda config --add channels conda-forge\n\nRemoving a conda Package\nWe decided that rasterio is not needed in this tutorial, so we will remove it from test_env. Note that this will remove the main package rasterio and its dependencies (unless a dependency was installed explicitly at an earlier point in time or is required be another package).\nconda remove -n test_env rasterio\nUsing Anaconda Cloud api site https://api.anaconda.org\nFetching package metadata .........\nSolving package specifications: ..........\n\nPackage plan for package removal in environment //anaconda/envs/test_env:\n\nThe following packages will be REMOVED:\n\n    rasterio: 0.35.1-np111py27_1 conda-forge\n\nProceed ([y]/n)? y\n\nUnlinking packages ...\n[      COMPLETE      ]|#######################################################################################################| 100%\n\nSelect all the correct answers\nWhich of the following sentences are true about Conda?\nA. It is a command line tool\nB. It is a package manager\nC. It is a Python package\nD. It is installed as part of Anaconda and Miniconda\nE. It is a metapackage\nF. It installs Python\nG. Using it you can handle Python packages only",
    "crumbs": [
      "Home",
      "Lecture 7: Virtual environments"
    ]
  },
  {
    "objectID": "lectures/7-virtual-environments.html#attribution",
    "href": "lectures/7-virtual-environments.html#attribution",
    "title": "Virtual environments",
    "section": "Attribution",
    "text": "Attribution\nThe conda virtual environment section of this guide was originally published at http://geohackweek.github.io/ under a CC-BY license and has been updated to reflect recent changes in conda, as well as modified slightly to fit the MDS lecture format.",
    "crumbs": [
      "Home",
      "Lecture 7: Virtual environments"
    ]
  },
  {
    "objectID": "lectures/7-virtual-environments.html#attribution-1",
    "href": "lectures/7-virtual-environments.html#attribution-1",
    "title": "Virtual environments",
    "section": "Attribution",
    "text": "Attribution\nThe conda virtual environment section of this guide was originally published at http://geohackweek.github.io/ under a CC-BY license and has been updated to reflect recent changes in conda, as well as modified slightly to fit the MDS lecture format.",
    "crumbs": [
      "Home",
      "Lecture 7: Virtual environments"
    ]
  },
  {
    "objectID": "lectures/5-rstudio-projects-notebooks.html",
    "href": "lectures/5-rstudio-projects-notebooks.html",
    "title": "Dynamic documents: from markdown to Rmarkdown documents",
    "section": "",
    "text": "Create RProjects in Rstudio using here to define robust file paths.\nDetect the basic components of a dynamic document in Jupyter Notebooks and in R Markdown\nExplain markdown usage in relation to dynamic documents\nDifferentiate between code chunks and code cells in Rmarkdown and Jupyter Notebooks.\nSelect appropiate code chunk options for RMarkdown.\nUse semantic line breaks for version control files\nSpecify metadata in the YAML header block\n\nPlatform in focus RStudio IDE",
    "crumbs": [
      "Home",
      "Lecture 5: Dynamic documents: from markdown to Rmarkdown documents"
    ]
  },
  {
    "objectID": "lectures/5-rstudio-projects-notebooks.html#lecture-objectives",
    "href": "lectures/5-rstudio-projects-notebooks.html#lecture-objectives",
    "title": "Dynamic documents: from markdown to Rmarkdown documents",
    "section": "",
    "text": "Create RProjects in Rstudio using here to define robust file paths.\nDetect the basic components of a dynamic document in Jupyter Notebooks and in R Markdown\nExplain markdown usage in relation to dynamic documents\nDifferentiate between code chunks and code cells in Rmarkdown and Jupyter Notebooks.\nSelect appropiate code chunk options for RMarkdown.\nUse semantic line breaks for version control files\nSpecify metadata in the YAML header block\n\nPlatform in focus RStudio IDE",
    "crumbs": [
      "Home",
      "Lecture 5: Dynamic documents: from markdown to Rmarkdown documents"
    ]
  },
  {
    "objectID": "lectures/5-rstudio-projects-notebooks.html#lecture-5-activity-1",
    "href": "lectures/5-rstudio-projects-notebooks.html#lecture-5-activity-1",
    "title": "Dynamic documents: from markdown to Rmarkdown documents",
    "section": "Lecture 5 Activity 1",
    "text": "Lecture 5 Activity 1",
    "crumbs": [
      "Home",
      "Lecture 5: Dynamic documents: from markdown to Rmarkdown documents"
    ]
  },
  {
    "objectID": "lectures/5-rstudio-projects-notebooks.html#the-rstudio-interface",
    "href": "lectures/5-rstudio-projects-notebooks.html#the-rstudio-interface",
    "title": "Dynamic documents: from markdown to Rmarkdown documents",
    "section": "The RStudio interface",
    "text": "The RStudio interface\nThe default panel layout is shown below. You can customize where the individual panels go, and if you have opend RStudio earlier, they might not be arranged in exactly this layout. Each panel has multiple tabs and here we are highlighting the tabs we will use the most in each panel.\n\n\nThe “Editor” tab is where you write R code that will be saved as a file.\nThe “Console” tab is where R commands are sent and evaluated by R. No R code written here is saved.\nThe “Environment” tab shows the currently defined variables.\nThe “Files” tab let’s you navigate your file system. This panel also has the “Plots” and “Help” tabs which show figures you create and function documentation, respectively.",
    "crumbs": [
      "Home",
      "Lecture 5: Dynamic documents: from markdown to Rmarkdown documents"
    ]
  },
  {
    "objectID": "lectures/5-rstudio-projects-notebooks.html#r-scripts",
    "href": "lectures/5-rstudio-projects-notebooks.html#r-scripts",
    "title": "Dynamic documents: from markdown to Rmarkdown documents",
    "section": "R Scripts",
    "text": "R Scripts\nA script is a text file that contains multiple commands that you want to be executed all together. In DSCI-511, you have seen how you can use VS Code to create Python scripts in .py files. Here, we will use RStudio to create an R script and save it in a .R file.\nTo create a new R Script, navigate to New File -&gt; R Script. Write a few lines of code, e.g.\nx &lt;- 5\ny &lt;- x + 3\nprint(paste0(\"y = \", y))\nYou can press the “Source” button to run the entire script (running a script is often referred to as “sourcing” it, hence the name). As you can see, the Console shows you what line it ran in order to source the script (you could also type this out yourself), and then displayed any output from the script in the end. You can run just part of a script by pressing the “Run” button, which runs any highlighted lines (the current line by default, the keyboard shortcut is Ctrl + Enter).\nIf a plot is generate from the executed code, it will show up in the “Plots” tab in the bottom left panel. You can try it by adding the following line to the script and clicking to run it (it uses a built-in data set called “cars”):\nplot(cars)",
    "crumbs": [
      "Home",
      "Lecture 5: Dynamic documents: from markdown to Rmarkdown documents"
    ]
  },
  {
    "objectID": "lectures/5-rstudio-projects-notebooks.html#editing-rstudio-settings-to-not-save-workspace-data",
    "href": "lectures/5-rstudio-projects-notebooks.html#editing-rstudio-settings-to-not-save-workspace-data",
    "title": "Dynamic documents: from markdown to Rmarkdown documents",
    "section": "Editing RStudio settings to not save workspace data",
    "text": "Editing RStudio settings to not save workspace data\nBy default, R asks us to save workspace data and load it when we start a new session. In general, we NEVER want to save our workspace (or load a previous one). We can avoid accidentally doing this through turning it off in the RStudio global options in the Tools menu.",
    "crumbs": [
      "Home",
      "Lecture 5: Dynamic documents: from markdown to Rmarkdown documents"
    ]
  },
  {
    "objectID": "lectures/5-rstudio-projects-notebooks.html#where-are-we",
    "href": "lectures/5-rstudio-projects-notebooks.html#where-are-we",
    "title": "Dynamic documents: from markdown to Rmarkdown documents",
    "section": "Where are we?",
    "text": "Where are we?\nDifferent from JupyterLab, when you open RStudio you open a .R or .Rmd file the RStudio, the current working directory is not neccesarily the project working directory, or the directory of the file you opened.\nEVERY SESSION you need to tell RStudio where you are working. Especially if you are loading other files outside of your .R or .Rmd file.\nSo, where are you when you open RStudio? You can find out one of two ways:\n\ntype getwd() in the console\nIn the files pane, click the cog/More button and then click “Go To Working Directory”\n\n\nSetting the working directory\nYou can set the working directory using the following 3 ways:\n\nUse an RStudio project (more on this below)\nIn the files pane, navigate the file structure to where you want the working directory to be. Then click the cog/More button and then click “Set As Working Directory”\nIn the Session menu, click Set Working Directory and then Choose Directory. Navigate the opened file browser to choose the directory.\nType setwd(\"PATH\") in the console (should be used with care though - see Jenny’s article about it.)",
    "crumbs": [
      "Home",
      "Lecture 5: Dynamic documents: from markdown to Rmarkdown documents"
    ]
  },
  {
    "objectID": "lectures/5-rstudio-projects-notebooks.html#rstudio-projects",
    "href": "lectures/5-rstudio-projects-notebooks.html#rstudio-projects",
    "title": "Dynamic documents: from markdown to Rmarkdown documents",
    "section": "RStudio projects",
    "text": "RStudio projects\nAn RStudio project is essentially a directory containing a special file: *.Rproj, which holds metadata for R about this project. RProjects set the working directory by default to be the root of the project and we recommend using it together with the here() package, which can easily create paths relative to root project dir:\ninstall.packages(\"here\")\nlibrary(here)\n\n# If you data is in project_root/files/data/\n# this will make sure that anyone using your project\n# will get the correct path\nhere(\"files\", \"data\", \"iris.csv\")",
    "crumbs": [
      "Home",
      "Lecture 5: Dynamic documents: from markdown to Rmarkdown documents"
    ]
  },
  {
    "objectID": "lectures/5-rstudio-projects-notebooks.html#creating-rstudio-projects",
    "href": "lectures/5-rstudio-projects-notebooks.html#creating-rstudio-projects",
    "title": "Dynamic documents: from markdown to Rmarkdown documents",
    "section": "Creating RStudio projects",
    "text": "Creating RStudio projects\nYou can either create an empty RStudio project, or clone an existing GitHub repo, which also allows you to use the RStudio interface to control Git.\n\nStart by making a GitHub repo\nCopy the URL needed to clone that repo from GitHub\nThen select File &gt; New Project &gt; Version Control &gt; Git and fill in.\n\nNow you can use RStudio as a Git client via the colorful icon in the toolbar of the edit panel. This includes adding parts of a document do the staging area, committing, pushing, pulling, and more. Using terminal Git will still be more reliable, since it is available anywhere Git is installed, but feel free to use the RStudio (or VS Code) interfaces as a complement.",
    "crumbs": [
      "Home",
      "Lecture 5: Dynamic documents: from markdown to Rmarkdown documents"
    ]
  },
  {
    "objectID": "lectures/5-rstudio-projects-notebooks.html#dynamic-documents-with-jupyter-notebooks-and-rmarkdown",
    "href": "lectures/5-rstudio-projects-notebooks.html#dynamic-documents-with-jupyter-notebooks-and-rmarkdown",
    "title": "Dynamic documents: from markdown to Rmarkdown documents",
    "section": "Dynamic documents with Jupyter Notebooks and RMarkdown",
    "text": "Dynamic documents with Jupyter Notebooks and RMarkdown\nOur journey to understand what is a dynamic document is linked with the literate programming paradigm [2] proposed bu Knuth in 1984 [1].\n\nI believe that the time is ripe for significantly better documentation of programs, and that we can best achieve this by considering programs to be works of literature. Hence, my title: “Literate Programming.” Let us change our traditional attitude to the construction of programs: Instead of imagining that our main task is to instruct a computer what to do, let us concentrate rather on explaining to human beings what we want a computer to do.”…\n–Donald Knuth. “Literate Programming (1984)” in Literate Programming. CSLI, 1992, pg. 99.\n\nIn the literate programming paradigm, an author has two (equally important) tasks [2]: 1. write program code to do computing, and 2. write narratives to explain what is being done by the program code\nGoing back to our first example in lecture 5 activity 1, we could agree to only mantain the code used to generate the plots and results produced as part of the analysis. But we will also agree that this code, even if we include comments and docstrings, it is not possible to be easily read for an human. Adding a narrative to the results will not only improve the capacity to understand the analysis and serve as a detailed documentation if not will allow to easily render again the document after changes in the code.\nThe idea of accompanying the code with so much detailed text, was not widely adopted for software projects [3] but turn into an amazing tool for data scientists who frecquently uses these documents as reports products of their analysis. The rendering of the plots as figures next to the text in a manuscript allows giving valuable context to the visualizations.\nMost of you are probably familiarized with dynamic documents as notebooks, our well known Jupyter Notebooks (.ipynb) and RMarkdown documents (.Rmd) .\nFrom the two elements that compose the dynamic documents, there are three principal components that are the similar for Jupyter Notebooks and RMarkdown documents:\n\nThe narrative is created with text formatted with markdown\nThe code can be run and it is combined with the text in two different ways:\n\nInterleaved as part of the text, called inline code (only present in RMarkdown documents).\nIn separated code blocks called code cells (Jupyter Notebooks) or code chunks (RMarkdown) that allow rendering code.\n\n\n example inline code in RMarkdown - https://rmarkdown.rstudio.com/articles_intro.html  example code chunk in RMarkdown - https://rmarkdown.rstudio.com/articles_intro.html",
    "crumbs": [
      "Home",
      "Lecture 5: Dynamic documents: from markdown to Rmarkdown documents"
    ]
  },
  {
    "objectID": "lectures/5-rstudio-projects-notebooks.html#lecture-5-activity-2",
    "href": "lectures/5-rstudio-projects-notebooks.html#lecture-5-activity-2",
    "title": "Dynamic documents: from markdown to Rmarkdown documents",
    "section": "Lecture 5 Activity 2",
    "text": "Lecture 5 Activity 2",
    "crumbs": [
      "Home",
      "Lecture 5: Dynamic documents: from markdown to Rmarkdown documents"
    ]
  },
  {
    "objectID": "lectures/5-rstudio-projects-notebooks.html#rmarkdown",
    "href": "lectures/5-rstudio-projects-notebooks.html#rmarkdown",
    "title": "Dynamic documents: from markdown to Rmarkdown documents",
    "section": "RMarkdown",
    "text": "RMarkdown\n\nThe overriding design goal for Markdown’s formatting syntax is to make it as readable as possible. The idea is that a Markdown-formatted document should be publishable as-is, as plain text, without looking like it’s been marked up with tags or formatting instructions. –John Gruber\n\nJupyter Notebooks and RMarkdown documents use markdown to format the text, but markdown has it’s own identity! You already known markdown files really well, at least you are using them as the README.md file of most of the project you have created. Let’s start by describing it and then we can talk about RMarkdown.\nMarkdown is basically a markup language that you can use to add formatting elements to easy to read plain-text text documents [4,5]. Markdown files have their own file extension (.md) that could be easily converted to HTML and because of that, rendered as a web page.\nNow we can start to understand markdown power:\n\nIts simple formatting syntax allows translation of content to HTML without having to be an expert.\nIt is human readable. Compare markdown and HTML, which one is easier to understand by reading only the code?\nIt is a plain-text document. This means that it is open by mostly any editor, making .md files quite reproducible.\n\nConverting the .md files to HTML documents (.html) involves the use of specific designed software for that purpuse. One of the most popular markdown converters is called pandoc. Pandoc can not only convert markdown to HTML if not to other popular and widely used formats as Word documents (.docx) and PDFs (.pdf).\nIf your goal is to render the final HTML document, keep in mind that you will need an extra step to view the file in a web browser. Also, HTML documents can not only be render as web pages, you can create with them blogs, books, articles. At the end of lecture 8 we will learn how to use GitHub Pages to render part of the HTML documents that we are going to generate. Therefore, some editors as RStudio, JupyterLab and VS Code will resume many steps at the same time rendering and displaying the .md file directly on the console. GitHub does something similar with the README.md file that appears automatically rendered as the first page of your GitHub repository.\n Image extracted from: https://www.markdownguide.org/getting-started/",
    "crumbs": [
      "Home",
      "Lecture 5: Dynamic documents: from markdown to Rmarkdown documents"
    ]
  },
  {
    "objectID": "lectures/5-rstudio-projects-notebooks.html#lecture-5-activity-3",
    "href": "lectures/5-rstudio-projects-notebooks.html#lecture-5-activity-3",
    "title": "Dynamic documents: from markdown to Rmarkdown documents",
    "section": "Lecture 5 Activity 3",
    "text": "Lecture 5 Activity 3",
    "crumbs": [
      "Home",
      "Lecture 5: Dynamic documents: from markdown to Rmarkdown documents"
    ]
  },
  {
    "objectID": "lectures/5-rstudio-projects-notebooks.html#markdown-and-its-flavours",
    "href": "lectures/5-rstudio-projects-notebooks.html#markdown-and-its-flavours",
    "title": "Dynamic documents: from markdown to Rmarkdown documents",
    "section": "Markdown and its flavours",
    "text": "Markdown and its flavours\nWe love markdown! But not all are good news…\nFirst, we will mention that the official markdown syntax documentation is not unambiguosly specified. What does this means? That there some implementations of markdown have diverged [6]. Meaning that the same markdown syntax can render different outputs in relation to the technology you are using. How a README.md file renders on GitHub could not be equal as how it will look like after being converted by pandoc. The webpage Babelmark III enable to detect this differences through many implementations, also listing some of the most well known pitfalls.\nSecondly, other way in which Markdown has diverged it is reflected in the number of extensions. This means that there is specific markdown syntax created for some implementations that will not work for other technologies.\nDon’t panic! In MDS we handle a limited number of markdown flavours (in order of appeareance in DSCI 521):\n\nJupyter Notebook (and Jupyter Book) Markdown: is an extension of a Markdown flavour called CommonMark Markdown. If you completed the tutorial that we were recommending on lecture 0 you have some practice on it! https://commonmark.org/help/tutorial/\nGitHub flavoured Markdown. To write issues, pull request, render your README.md file in the first page of your repository you will be using this Markdown flavour. It is a (different) extension of the CommonMark Spec also used for Jupyter Notebooks.\n\nRead how to use it here!\n\nR Markdown documents. R Markdown is an implementation of Pandoc Markdown (with a wide list of interesting extensions!)\n\nDon’t panic! The important take-home message of this is that you should always check the documentation of the technology you are using. Even if for most of the cases could be quite similar, there is not an universal markdown cheatsheet or proceeding that will possible to be used with all of them!\n\nA good practice when writting in markdown: semantic line breaks\n\nHints for Preparing Documents\nMost documents go through several versions (always more than you expected) before they are finally finished. Accordingly, you should do whatever possible to make the job of changing them easy.\nFirst, when you do the purely mechanical operations of typing, type so subsequent editing will be easy. Start each sentence on a new line. Make lines short, and break lines at natural places, such as after commas and semicolons, rather than randomly. Since most people change documents by rewriting phrases and adding, deleting and rearranging sentences, these precautions simplify any editing you have to do later.\n— Brian W. Kernighan, 1974 [9]\n\nYou need 2 spaces to create a line break using markdown. This means that you can actually break a line without creating a line break in the rendered file.\nThe use of shorter phrases could be a benefit when you are version controlling files.",
    "crumbs": [
      "Home",
      "Lecture 5: Dynamic documents: from markdown to Rmarkdown documents"
    ]
  },
  {
    "objectID": "lectures/5-rstudio-projects-notebooks.html#lecture-5-activity-4",
    "href": "lectures/5-rstudio-projects-notebooks.html#lecture-5-activity-4",
    "title": "Dynamic documents: from markdown to Rmarkdown documents",
    "section": "Lecture 5 Activity 4",
    "text": "Lecture 5 Activity 4",
    "crumbs": [
      "Home",
      "Lecture 5: Dynamic documents: from markdown to Rmarkdown documents"
    ]
  },
  {
    "objectID": "lectures/5-rstudio-projects-notebooks.html#text-and-rendering-r-markdown-documents",
    "href": "lectures/5-rstudio-projects-notebooks.html#text-and-rendering-r-markdown-documents",
    "title": "Dynamic documents: from markdown to Rmarkdown documents",
    "section": "Text and rendering R Markdown documents",
    "text": "Text and rendering R Markdown documents\nIn a R Markdown document any line of text not in a code chunk (like this line of text) will be formatted using Markdown. Similar to JupyterLab, you can also use HTML and LaTeX here to do more advanced formatting. Unlike JupyterLab, you do not get to see these Markdown sections rendered on their own. To see this text rendered, you need to render the whole document. You can do that clicking the “Knit” or “Preview” button on the top. The difference between these two is that “Preview” creates a HTML version of your document as it looks right now, whereas “Knit” first restarts the R session and runs through the entire document from the beginning to make sure it will work when you send it to someone else.\n\nA helpful hint for successfully working with R Markdown documents\nGiven that you need to render the entire document to see your Markdown and LaTeX rendered, it is important to “knit” often as you make changes. If you make an error in a LaTeX equation for example, it will stop the knitting/rendering process and you will not get to see the rendered document. So by knitting/rendering often you will know where the last changes you made are and then will be able to easily identify and fix your errors.\n\nR Markdown (.Rmd) -&gt; Markdown (.md)\nAnalogous to the Jupyter Notebook cells, the R Markdown code chunks after being render will be embedded in your final report.\nWhen you run render, R Markdown feeds the .Rmd file to knitr, which executes all of the code chunks and creates a new markdown (.md) document containing the code and its outputs.\nThe markdown file generated by knitr is then processed by pandoc which is responsible for creating the finished format.\n Rmarkdown documents are created from text and R code",
    "crumbs": [
      "Home",
      "Lecture 5: Dynamic documents: from markdown to Rmarkdown documents"
    ]
  },
  {
    "objectID": "lectures/5-rstudio-projects-notebooks.html#lecture-5-activity-5",
    "href": "lectures/5-rstudio-projects-notebooks.html#lecture-5-activity-5",
    "title": "Dynamic documents: from markdown to Rmarkdown documents",
    "section": "Lecture 5 Activity 5",
    "text": "Lecture 5 Activity 5",
    "crumbs": [
      "Home",
      "Lecture 5: Dynamic documents: from markdown to Rmarkdown documents"
    ]
  },
  {
    "objectID": "lectures/5-rstudio-projects-notebooks.html#r-markdown-and-r-notebooks",
    "href": "lectures/5-rstudio-projects-notebooks.html#r-markdown-and-r-notebooks",
    "title": "Dynamic documents: from markdown to Rmarkdown documents",
    "section": "R Markdown and R Notebooks",
    "text": "R Markdown and R Notebooks\nR Markdown is a “flavor” of Markdown that allows you to run R code in addition to supporting all the Markdown syntax that you have already learned. R Markdown documents (.Rmd) are most commonly run via R Notebooks which work similarly to Jupyter notebooks in the sense that you can interleave writing code, formatted narrative text, and view output all in the same document. These are both examples of what it called “literate programming” where the goal is to mix code and paragraph text seamlessly.\nLet’s see an example of this by creating a new R Notebook via File -&gt; New -&gt; R Notebook. As you can see, there is a default template for Notebooks, which include useful info on how to use them. We can see the keyboard shortcuts for running and inserting cells, and when we execute the plot code the plot shows up inside the notebook rather than in the side panel as when we ran the same line from within the script script.",
    "crumbs": [
      "Home",
      "Lecture 5: Dynamic documents: from markdown to Rmarkdown documents"
    ]
  },
  {
    "objectID": "lectures/5-rstudio-projects-notebooks.html#lecture-5-activity-6",
    "href": "lectures/5-rstudio-projects-notebooks.html#lecture-5-activity-6",
    "title": "Dynamic documents: from markdown to Rmarkdown documents",
    "section": "Lecture 5 Activity 6",
    "text": "Lecture 5 Activity 6",
    "crumbs": [
      "Home",
      "Lecture 5: Dynamic documents: from markdown to Rmarkdown documents"
    ]
  },
  {
    "objectID": "lectures/5-rstudio-projects-notebooks.html#lecture-5-activity-7",
    "href": "lectures/5-rstudio-projects-notebooks.html#lecture-5-activity-7",
    "title": "Dynamic documents: from markdown to Rmarkdown documents",
    "section": "Lecture 5 Activity 7",
    "text": "Lecture 5 Activity 7",
    "crumbs": [
      "Home",
      "Lecture 5: Dynamic documents: from markdown to Rmarkdown documents"
    ]
  },
  {
    "objectID": "lectures/5-rstudio-projects-notebooks.html#lecture-5-activity-8",
    "href": "lectures/5-rstudio-projects-notebooks.html#lecture-5-activity-8",
    "title": "Dynamic documents: from markdown to Rmarkdown documents",
    "section": "Lecture 5 Activity 8",
    "text": "Lecture 5 Activity 8",
    "crumbs": [
      "Home",
      "Lecture 5: Dynamic documents: from markdown to Rmarkdown documents"
    ]
  },
  {
    "objectID": "lectures/5-rstudio-projects-notebooks.html#lecture-5-activity-9",
    "href": "lectures/5-rstudio-projects-notebooks.html#lecture-5-activity-9",
    "title": "Dynamic documents: from markdown to Rmarkdown documents",
    "section": "Lecture 5 Activity 9",
    "text": "Lecture 5 Activity 9",
    "crumbs": [
      "Home",
      "Lecture 5: Dynamic documents: from markdown to Rmarkdown documents"
    ]
  },
  {
    "objectID": "lectures/5-rstudio-projects-notebooks.html#references",
    "href": "lectures/5-rstudio-projects-notebooks.html#references",
    "title": "Dynamic documents: from markdown to Rmarkdown documents",
    "section": "References",
    "text": "References\n1 - D. E. Knuth, Literate Programming, The Computer Journal, Volume 27, Issue 2, 1984, Pages 97–111, https://doi.org/10.1093/comjnl/27.2.97 2 - Y. Xie Dynamic Documents with R and knitr 3 - 4 - https://www.markdownguide.org/ 5- https://daringfireball.net/projects/markdown/ 6 - https://babelmark.github.io/faq/ 7 - RStudio Conf 2022 - Quarto Workshop 8 - 9 - https://rhodesmill.org/brandon/2012/one-sentence-per-line/ UNIX for Beginners\nNOT INCLUDED FOR NOW:\n\nCode snippets\nAs we started to type for above, the code completion popped up and the first entry said “snippet”, what is that? A code snippet is a text macro, which means that you can type a short string of characters to insert a template or snippet of text by pressing TAB. You can see all the default snippets and define your own by going to Tools -&gt; Global options -&gt; Code -&gt; Edit snippets. Snippets are available anywhere in RStudio, not just in R Markdown documents.",
    "crumbs": [
      "Home",
      "Lecture 5: Dynamic documents: from markdown to Rmarkdown documents"
    ]
  },
  {
    "objectID": "lectures/3-git-history-merge-conflicts-stash.html",
    "href": "lectures/3-git-history-merge-conflicts-stash.html",
    "title": "Getting grovy with Git and GitHub",
    "section": "",
    "text": "Explore the Git history via git log in the terminal and GitHub.\nCompare commits using git diff in the terminal and GitHub.\nSolve merge conflicts at the command line and in VS Code.\nSave transitory changes with git stash.\nManage to avoid pushing specific local files by including a .gitignore.\nDifferenciate among different ways to restore your project history (git reset --hard/--soft, git revert) when working on an older version of a project.\n\nLecture 3 \nYou clone a project you want to start collaborating in. How you can see the",
    "crumbs": [
      "Home",
      "Lecture 3: Getting grovy with Git and GitHub"
    ]
  },
  {
    "objectID": "lectures/3-git-history-merge-conflicts-stash.html#lecture-objectives",
    "href": "lectures/3-git-history-merge-conflicts-stash.html#lecture-objectives",
    "title": "Getting grovy with Git and GitHub",
    "section": "",
    "text": "Explore the Git history via git log in the terminal and GitHub.\nCompare commits using git diff in the terminal and GitHub.\nSolve merge conflicts at the command line and in VS Code.\nSave transitory changes with git stash.\nManage to avoid pushing specific local files by including a .gitignore.\nDifferenciate among different ways to restore your project history (git reset --hard/--soft, git revert) when working on an older version of a project.\n\nLecture 3 \nYou clone a project you want to start collaborating in. How you can see the",
    "crumbs": [
      "Home",
      "Lecture 3: Getting grovy with Git and GitHub"
    ]
  },
  {
    "objectID": "lectures/3-git-history-merge-conflicts-stash.html#viewing-the-history-of-a-project",
    "href": "lectures/3-git-history-merge-conflicts-stash.html#viewing-the-history-of-a-project",
    "title": "Getting grovy with Git and GitHub",
    "section": "Viewing the history of a project",
    "text": "Viewing the history of a project\nThere are two ways you can view the Git history of a project:\n\nOn GitHub through the repo’s code commit view\nOn your local machine using git log\n\n\nSteps to follow:\n\nOn GitHub, on the repo’s landing page click “\\(N\\) commit” link (where \\(N\\) is the number of commits made on the repo, yours should be around 6).\nOn your laptop, from inside your Git repository type git log at the command line. You can use git log --oneline for more succinct output or the alias shortcut gl that we created.\n\nYou can navigate this log by scrolling with the mouse, arrow keys, or by the same commands we used with man in the first lecture\n\nq = quit\nb/space = up/down\n/ + search term + enter = search for a word\nn/N got to next/previous match for the search term\n\nYou don’t need to memorize these commands, they’re here as a resource if you wish to use them instead of the mouse and arrow keys.\n\n\n\n\n\n\nReflection point\nHow similar are the local and webpage log views?? Do you get the same information from both? Which seems easier to read/navigate?",
    "crumbs": [
      "Home",
      "Lecture 3: Getting grovy with Git and GitHub"
    ]
  },
  {
    "objectID": "lectures/3-git-history-merge-conflicts-stash.html#restoring-an-older-version-of-a-file",
    "href": "lectures/3-git-history-merge-conflicts-stash.html#restoring-an-older-version-of-a-file",
    "title": "Getting grovy with Git and GitHub",
    "section": "Restoring an older version of a file",
    "text": "Restoring an older version of a file\nOh no! We realize by viewing the history that we made a mistake! We didn’t mean to delete our list of dependencies. Worry not! We can now take advantage that we have been tracking this file under version control by using git restore to retrieve an older version of the file to replace the current version.\nLet’s restore the version of the file BEFORE we deleted the software dependency list.\n\nSteps to follow:\n\nLook at the log to see which version of the file we want to go back to and get its Short SHA-1 (the first characters of the commit ID, we’ll need this to know which point in time to retrieve the file from).\nThen we use git restore in the command line to grab it: git restore --source SHORT_SHA-1 FILENAME (you can also use -s instead of --source.\nWhen restoring the file, it is added to the working area. If we want to save the restored version of the file to the git repo, we need to add and commit it, just like with any other modifications.\nDon’t forget git push to get the file backed up on GitHub!",
    "crumbs": [
      "Home",
      "Lecture 3: Getting grovy with Git and GitHub"
    ]
  },
  {
    "objectID": "lectures/3-git-history-merge-conflicts-stash.html#how-do-you-know-you-have-a-merge-conflict",
    "href": "lectures/3-git-history-merge-conflicts-stash.html#how-do-you-know-you-have-a-merge-conflict",
    "title": "Getting grovy with Git and GitHub",
    "section": "How do you know you have a merge conflict?",
    "text": "How do you know you have a merge conflict?\nIf you have committed some changes locally, you might see something like this when you try to push them:\nTo https://github.com/joelostblom/DSCI_521_lab1_jostblom\n ! [rejected]        master -&gt; master (non-fast-forward)\nerror: failed to push some refs to 'https://github.com/joelostblom/DSCI_521_lab1_jostblom'\nhint: Updates were rejected because the tip of your current branch is behind\nhint: its remote counterpart. Merge the remote changes (e.g. 'git pull')\nhint: before pushing again.\nhint: See the 'Note about fast-forwards' in 'git push --help' for details.\nAs the message tells you, there are new changes to the remote repo that you need to pull down from GitHub before you are allowed to push up your changes. If there are no conflicts when you pull, Git will say that everything went OK and you can push up your new changes. If there are conflicts, you will see something like this:\nremote: Counting objects: 5, done.\nremote: Compressing objects: 100% (2/2), done.\nremote: Total 3 (delta 1), reused 3 (delta 1)\nUnpacking objects: 100% (3/3), done.\nFrom https://github.com/joelostblom/DSCI_521_lab1_jostblom\n * branch            master     -&gt; FETCH_HEAD\nAuto-merging README.md\nCONFLICT (content): Merge conflict in README.md\nAutomatic merge failed; fix conflicts and then commit the result.\n\nYou have a merge conflict. Merge conflicts are not bad, they happen to everyone and you will need to know how to instruct git what to do.",
    "crumbs": [
      "Home",
      "Lecture 3: Getting grovy with Git and GitHub"
    ]
  },
  {
    "objectID": "lectures/3-git-history-merge-conflicts-stash.html#lecture-3-activity-1",
    "href": "lectures/3-git-history-merge-conflicts-stash.html#lecture-3-activity-1",
    "title": "Getting grovy with Git and GitHub",
    "section": "Lecture 3 Activity 1",
    "text": "Lecture 3 Activity 1",
    "crumbs": [
      "Home",
      "Lecture 3: Getting grovy with Git and GitHub"
    ]
  },
  {
    "objectID": "lectures/3-git-history-merge-conflicts-stash.html#what-do-you-do-to-fix-a-merge-conflict",
    "href": "lectures/3-git-history-merge-conflicts-stash.html#what-do-you-do-to-fix-a-merge-conflict",
    "title": "Getting grovy with Git and GitHub",
    "section": "What do you do to fix a merge conflict?",
    "text": "What do you do to fix a merge conflict?\n\nOpen the file that has a conflict (the output of git pull will tell you which files) in a plain text editor (e.g., VS code)\nLook for the conflict (hint - search for &lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD)\nFix the conflict by deleting everything you don’t want to keep in the file, including the &lt;&lt;&lt;&lt;&lt; etc that git added.\n\nNote VS Code will help you with this by color highlighting the changes and providing buttons you can click to accept either the current or incoming change (or both). Using these buttons instead of modifying the file manually can save you from mistakes that can take a lot of time to troubleshoot and fix so we highly recommend that you use this feature.\n\nAfter the file looks like you want it, add it and commit your changes. Then you can push them up to GitHub.\n\nHere’s an example of a text file with a conflict and how it can look after you have resolved it:\nSome text up here\nthat is not part of the merge conflict,\nbut just included for context.\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\nWe added this line in our last commit\n=======\nThis line was added somewhere else\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; dabb4c8c450e8475aee9b14b4383acc99f42af1d\n\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD precedes the change you made (that you couldn’t push)\n======= is a separator between the conflicting changes\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; dabb4c8c450e8475aee9b14b4383acc99f42af1d flags the end of the conflicting change you pulled from GitHub",
    "crumbs": [
      "Home",
      "Lecture 3: Getting grovy with Git and GitHub"
    ]
  },
  {
    "objectID": "lectures/3-git-history-merge-conflicts-stash.html#lecture-3-activity-2",
    "href": "lectures/3-git-history-merge-conflicts-stash.html#lecture-3-activity-2",
    "title": "Getting grovy with Git and GitHub",
    "section": "Lecture 3 Activity 2",
    "text": "Lecture 3 Activity 2",
    "crumbs": [
      "Home",
      "Lecture 3: Getting grovy with Git and GitHub"
    ]
  },
  {
    "objectID": "lectures/3-git-history-merge-conflicts-stash.html#what-about-merge-conflicts-of-jupyter-notebooks",
    "href": "lectures/3-git-history-merge-conflicts-stash.html#what-about-merge-conflicts-of-jupyter-notebooks",
    "title": "Getting grovy with Git and GitHub",
    "section": "What about merge conflicts of Jupyter notebooks?",
    "text": "What about merge conflicts of Jupyter notebooks?\n\nFirst - a bit about what a Jupyter notebook is made up of\n\n.ipynb files are “plain” text files, and we can view them in a plain text editor and make some sense of them\nThe contents of the notebook are encoded in JSON format, which means that there are many brackets in the file, which can make it hard to read for humans (but easy for machines).\n\nFor example, this notebook of 2 cells:\n\n\n\nalt tag\n\n\nis encoded by the following JSON:\n{\n \"cells\": [\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"# A Markdown header cell\\n\",\n    \"\\n\",\n    \"Below is a simple example of some code in Python:\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 1,\n   \"metadata\": {\n    \"collapsed\": false\n   },\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"15\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"x = 5\\n\",\n    \"y = 10\\n\",\n    \"\\n\",\n    \"print(x + y)\"\n   ]\n  }\n ],\n \"metadata\": {\n  \"anaconda-cloud\": {},\n  \"kernelspec\": {\n   \"display_name\": \"Python [Root]\",\n   \"language\": \"python\",\n   \"name\": \"Python [Root]\"\n  },\n  \"language_info\": {\n   \"codemirror_mode\": {\n    \"name\": \"ipython\",\n    \"version\": 3\n   },\n   \"file_extension\": \".py\",\n   \"mimetype\": \"text/x-python\",\n   \"name\": \"python\",\n   \"nbconvert_exporter\": \"python\",\n   \"pygments_lexer\": \"ipython3\",\n   \"version\": \"3.5.1\"\n  }\n },\n \"nbformat\": 4,\n \"nbformat_minor\": 0\n}",
    "crumbs": [
      "Home",
      "Lecture 3: Getting grovy with Git and GitHub"
    ]
  },
  {
    "objectID": "lectures/3-git-history-merge-conflicts-stash.html#version-control-and-jupyter-notebook",
    "href": "lectures/3-git-history-merge-conflicts-stash.html#version-control-and-jupyter-notebook",
    "title": "Getting grovy with Git and GitHub",
    "section": "Version control and Jupyter notebook",
    "text": "Version control and Jupyter notebook\nBecause the notebooks are stored as plain text, we can use them for version control, but this is not without issues, since the JSON format can make it difficult to interpret difference between files and to manually fix conflicts.\nJupyterLab IDE has made really easy now fix merge conflicts. …",
    "crumbs": [
      "Home",
      "Lecture 3: Getting grovy with Git and GitHub"
    ]
  },
  {
    "objectID": "lectures/3-git-history-merge-conflicts-stash.html#create-a-.gitignore-file",
    "href": "lectures/3-git-history-merge-conflicts-stash.html#create-a-.gitignore-file",
    "title": "Getting grovy with Git and GitHub",
    "section": "5. Create a .gitignore file",
    "text": "5. Create a .gitignore file\nUsing the plain text editor of your choice (mine is VS Code) create a file called .gitignore inside your Git repo. To do this with VS Code, I would type:\ncode .gitignore\nInside the text file, list the files and folders you would like to ignore, one per line. For example:\n.ipynb_checkpoints/\n.DS_Store\nSave the file, and add and commit it with Git. Then try git status again. You should see:\nOn branch timberst-master\nnothing to commit, working tree clean",
    "crumbs": [
      "Home",
      "Lecture 3: Getting grovy with Git and GitHub"
    ]
  },
  {
    "objectID": "lectures/3-git-history-merge-conflicts-stash.html#gitignore-tips-and-tricks",
    "href": "lectures/3-git-history-merge-conflicts-stash.html#gitignore-tips-and-tricks",
    "title": "Getting grovy with Git and GitHub",
    "section": ".gitignore tips and tricks",
    "text": ".gitignore tips and tricks\n\nappend **/ to the beginning of any file/folder names listed in the .gitignore file to have them ignored in subdirectories within the repo as well\ncreate a global .gitignore file so that you do not have to create the same .gitignore for all your homework repos\n\nLet’s create a gitignore file in our 521 lab 2 repo.\n\nSteps to follow:\n\nUse a text editor (e.g., VS Code, nano, Jupyter) to create a file called .gitignore in your 521 lab 2 repo\nAdd **/.ipynb_checkpoints/ to that file and save it\nadd and commit it with Git\nType git status and see if you no longer see .ipynb_checkpoints/ as a untracked file\n\n\nWe can do anything we want:\n\nkeep the change made in the local repository,\nkeep the change made in the remote repository,\nwrite something new to replace both,\nor get rid of the change entirely.\n\n\nTo move the branch we are currently back to a previously created commit, we can use the git reset command. Let’s say that we are currently on the master branch of a repo where the output of git log --oneline looks like this:\nfb962e0 (HEAD -&gt; master) Add md demo\nbcb541e Make heading more precise\n5c01f2f Initial commit\nWe can move the location of the master branch back in the commit history by typing git reset &lt;sha&gt;. So to move to the previous commit, we would type git reset bcb541e. Our git log would now show this:\nbcb541e (HEAD -&gt; master) Make heading more precise\n5c01f2f Initial commit\nWhat happened to the changes that were made in commit fb962e0? The default behavior is to move them back into the working area, which was indicated by this message that showed up after we did git reset bcb541e:\nUnstaged changes after reset:\nM       README.md\nThat means we could now make any modification we wish and then commit again with a new commit message. If we want to discard the changes instead of moving them to the working area, we can add the --hard flag. Typing git reset --hard 5c01f2f will not show us any message, since the changes are not unstaged, they are discarded. Our log now looks like this\n5c01f2f (HEAD -&gt; master) Initial commit\nAre the previous changes lost forever? Not yet, git keeps a backup of everything that happens in the repo in its “reflog”. Commits that are not part of any branch are referred to as being “dangling”, and are cleared out at regular intervals, rather than immediately. So if we realize that we made a mistake right away, we could get our changes back by doing git reset bcb541e, which would move us forward to the commit we just “deleted”. This behavior should not be relied upon because when the reflog is automatically cleared by git, your changes are gone forever.",
    "crumbs": [
      "Home",
      "Lecture 3: Getting grovy with Git and GitHub"
    ]
  },
  {
    "objectID": "lectures/3-git-history-merge-conflicts-stash.html#lecture-3-activity-3",
    "href": "lectures/3-git-history-merge-conflicts-stash.html#lecture-3-activity-3",
    "title": "Getting grovy with Git and GitHub",
    "section": "Lecture 3 Activity 3",
    "text": "Lecture 3 Activity 3",
    "crumbs": [
      "Home",
      "Lecture 3: Getting grovy with Git and GitHub"
    ]
  },
  {
    "objectID": "lectures/3-git-history-merge-conflicts-stash.html#syncing-with-a-remote-after-resetting",
    "href": "lectures/3-git-history-merge-conflicts-stash.html#syncing-with-a-remote-after-resetting",
    "title": "Getting grovy with Git and GitHub",
    "section": "Syncing with a remote after resetting",
    "text": "Syncing with a remote after resetting\nThis is a dangerous operation that can delete all your work. If we want to get rid of a commit on a remote, we will need to push our changes. But as we have seen before, git will refuse to push changes when the remote is ahead of the local branch. To override this warning and force git to push to the remote we can use the -f/--force flag.\nForce pushing is dangerous, and you should never do this on the master branch of a repository that you share with collaborators unless you have all discussed this and they are aware of what you are doing. The reason is that by force pushing, you will make it so that everyone else who is using this repository are now out of sync with the master branch, since you have reset master to a previous state. Be careful, better safe than sorry\nTimes when a force push is legitimate includes when you have have rebased a feature branch to syn it with master or if you are working alone and you are 100% sure that you want to remove a commit from GitHub. A safer way to undo a change in a commit, is to make a new commit that removes the content of the old one. You can do this manually, or use git revert &lt;sha&gt; to automatically create a new commit that undoes an old one.",
    "crumbs": [
      "Home",
      "Lecture 3: Getting grovy with Git and GitHub"
    ]
  },
  {
    "objectID": "lectures/1-MDStools-bash-filesystem.html",
    "href": "lectures/1-MDStools-bash-filesystem.html",
    "title": "Introduction to MDS software and Bash",
    "section": "",
    "text": "Recognize the directory hierarchy as it is commonly represented in diagrams, paths, and file explorer software.\nDistinguish common operators and representations of the different filesystem elements typically used in Bash.\nExplore the filesystem using Bash commands as ls, pwd and cd.\nTranslate an absolute path into a relative path and vice versa.\nUse command-line arguments to produce alternative outputs of commands.\nCreate, edit, move, and delete files and folders using the command line and VS Code.\nMost of the tools we are going to learn during DSCI 521 are tools that programmers used. Programming involves interacting with the system using commands",
    "crumbs": [
      "Home",
      "Lecture 1: Introduction to MDS software and Bash"
    ]
  },
  {
    "objectID": "lectures/1-MDStools-bash-filesystem.html#learning-outcomes",
    "href": "lectures/1-MDStools-bash-filesystem.html#learning-outcomes",
    "title": "Introduction to MDS software and Bash",
    "section": "",
    "text": "Recognize the directory hierarchy as it is commonly represented in diagrams, paths, and file explorer software.\nDistinguish common operators and representations of the different filesystem elements typically used in Bash.\nExplore the filesystem using Bash commands as ls, pwd and cd.\nTranslate an absolute path into a relative path and vice versa.\nUse command-line arguments to produce alternative outputs of commands.\nCreate, edit, move, and delete files and folders using the command line and VS Code.",
    "crumbs": [
      "Home",
      "Lecture 1: Introduction to MDS software and Bash"
    ]
  },
  {
    "objectID": "lectures/1-MDStools-bash-filesystem.html#introduction",
    "href": "lectures/1-MDStools-bash-filesystem.html#introduction",
    "title": "Introduction to MDS software and Bash",
    "section": "Introduction",
    "text": "Introduction\nWelcome to Computer Platforms in Data Science!\nThis week we are going to learn about exploring the filesystem, using the command line, and some other useful tools.",
    "crumbs": [
      "Home",
      "Lecture 1: Introduction to MDS software and Bash"
    ]
  },
  {
    "objectID": "lectures/1-MDStools-bash-filesystem.html#lecture-1-activity-1",
    "href": "lectures/1-MDStools-bash-filesystem.html#lecture-1-activity-1",
    "title": "Introduction to MDS software and Bash",
    "section": "Lecture 1 Activity 1",
    "text": "Lecture 1 Activity 1",
    "crumbs": [
      "Home",
      "Lecture 1: Introduction to MDS software and Bash"
    ]
  },
  {
    "objectID": "lectures/1-MDStools-bash-filesystem.html#the-mds-software-stack",
    "href": "lectures/1-MDStools-bash-filesystem.html#the-mds-software-stack",
    "title": "Introduction to MDS software and Bash",
    "section": "The MDS software stack",
    "text": "The MDS software stack\nThe following are the core programs that you will be using throughout the MDS program.\n\nBash: Helps you navigate filesystem, run programs, and automate tasks on your computer.\nGit and GitHub: Used to track changes in your code and collaborate with others on projects.\nPython and R: Popular programming languages for analyzing data, creating visualizations, performing statistical analysis, and building machine learning models.\nVisual Studio Code, JupyterLab, RStudio, and Positron: Tools that provide an integraded development environemnt (IDE) that make writing and running code easier. They also help create interactive notebooks and reports.\n\nThese programs also have active development communities and are open source, which means that anyone can read the source code and contribute to these projects. Open source programs have many benefits, such as\n\nBeing able to use the software after leaving school without paying exorbitant amounts of money.\nHaving access to the source code can help you learn and fix bugs (even closed-source commercial software has bugs, but they are just harder to see and fix).\nOpen-source software is customizable and flexible.\nIt is becoming the standard in many tech companies.\nBeing a part of an awesome and active community!",
    "crumbs": [
      "Home",
      "Lecture 1: Introduction to MDS software and Bash"
    ]
  },
  {
    "objectID": "lectures/1-MDStools-bash-filesystem.html#lecture-1-activity-2",
    "href": "lectures/1-MDStools-bash-filesystem.html#lecture-1-activity-2",
    "title": "Introduction to MDS software and Bash",
    "section": "Lecture 1 Activity 2",
    "text": "Lecture 1 Activity 2",
    "crumbs": [
      "Home",
      "Lecture 1: Introduction to MDS software and Bash"
    ]
  },
  {
    "objectID": "lectures/1-MDStools-bash-filesystem.html#introduction-to-computing",
    "href": "lectures/1-MDStools-bash-filesystem.html#introduction-to-computing",
    "title": "Introduction to MDS software and Bash",
    "section": "Introduction to computing",
    "text": "Introduction to computing\nBefore we get into the different applications, let’s talk about computing. Essentially, computing is about humans communicating with machines to modulate flows of current in hardware. Early examples of human computer communication were quite primitive and included actually disconnecting a wire and connecting it again in a different spot.\nLuckily, we are not doing this anymore; instead we have graphical user interface with menus and buttons, which is what you are commonly using on your laptop.\nThese graphical interface can be thought of as a layer (or shell) around the internal components of your operating system. Shells exist as an intermediate that both makes it easy for us to express our thoughts, and for computers to interpret them.\n\nText-based communication\nWe will learn how to communicate to a computer via a text-based shell, rather than a graphical one.\nUsing a text-based shell might at first seems counter-intuitive, since the reason for creating a shell in the first place was to facilitate user interaction with the computer. So now that we have these easy to use graphical user interfaces (GUIs), why would anyone in their right mind go back to using a text based interface?\nWell, it’s partly a misconception, GUIs are nice when you are new to something, but text based interfaces can be faster and easier to use when you know what you are doing, and provide a lot more flexibility.\nWe can compare it to learning a language, in the beginning it’s nice to look things up in a dictionary (or a menu on the computer), but once I know what I want to say, it is just easer to say or type it directly, instead of looking in submenues.\nAnd by extension, it would be even faster to speak or even just think of what you want to do and have it executed by the computer, this is what speech- and brain-computer interfaces are concerned with.\n\n\nBash\nbash is the most commonly used text shell. You have it installed on your computer by default if you are using Mac or Linux machine, and if you are on a Windows machine you downloaded bash as part of the setup instructions. For Macs the default shell is zsh, but we had you change it to bash in our setup instructions. Sometimes we might use “prompt”, “command line”, or “terminal”, which for the purposes of this lecture, refers to the same thing.\nThe abbreviation BASH stands for Bourne Again SHell. Other shells existed before Bash, and one of the most successful early shells was invented by Stephen Bourne at Bell Labs in 1977, which he called the Bourne Shell. In 1989, the Free Software Foundation improved the Bourne Shell and as a pun, named it the Bourne Again Shell to symbolize it was now “reborn” with new features.\nText-based shells are also called command-line interfaces (CLI). The heart of every CLI is a read-evaluate-print loop (REPL). When we type a command and press Return (also called Enter) the CLI reads the command, evaluates it (i.e., executes it), prints the command’s output, and loops around to wait for another command. Let’s see how to do that next!",
    "crumbs": [
      "Home",
      "Lecture 1: Introduction to MDS software and Bash"
    ]
  },
  {
    "objectID": "lectures/1-MDStools-bash-filesystem.html#your-first-words",
    "href": "lectures/1-MDStools-bash-filesystem.html#your-first-words",
    "title": "Introduction to MDS software and Bash",
    "section": "Your first words",
    "text": "Your first words\nThe default prompt character:\n$\nTyping in the whoami command for showing your username and pressing enter to run it:\nwhoami\nusername\nThe pwd command stands for Print Working Directory.\npwd\n# Linux\n/home/username\n\n# MacOS\n/Users/username\n\n# Windows\n/c/Users/username\nOur first shell commands will let us explore our folders and files, and will also introduce us to several conventions that most command line tools follow. To start, when bash runs it presents us with a prompt to indicate that it is waiting for us to type something. This prompt is a simple dollar sign by default ($). However, different shells may use a different symbol: for example, the default zsh shell on Macs uses %.\nIf we run the command whoami, the computer will tell us who we are (our login name), and if we run pwd (Print Working Directory) the shell tells us where we are (the home directory by default when we launch the shell).\nEach user has a home directory; the function and location of this directory differs a little bit between operating systems. On Linux it is usually /home/username, on MacOS it is /Users/username, and on Windows it will show up as /c/Users/username (if you have Git Bash installed). Our examples in this module shows the Linux directory structure, but you will see that some of the other modules show what we would see on MacOS or Windows.",
    "crumbs": [
      "Home",
      "Lecture 1: Introduction to MDS software and Bash"
    ]
  },
  {
    "objectID": "lectures/1-MDStools-bash-filesystem.html#exploring-the-files-system",
    "href": "lectures/1-MDStools-bash-filesystem.html#exploring-the-files-system",
    "title": "Introduction to MDS software and Bash",
    "section": "Exploring the files system",
    "text": "Exploring the files system\nNow that we know where we are, let’s see what we have using the command ls (short for “listing”), which prints the names of the files and directories in the current directory.\nls\nDownloads     Music\nDocuments     todo.txt\nPictures      my_program\nAgain, our results may be different depending on our operating system and what files or directories we have.",
    "crumbs": [
      "Home",
      "Lecture 1: Introduction to MDS software and Bash"
    ]
  },
  {
    "objectID": "lectures/1-MDStools-bash-filesystem.html#using-commands-with-options",
    "href": "lectures/1-MDStools-bash-filesystem.html#using-commands-with-options",
    "title": "Introduction to MDS software and Bash",
    "section": "Using commands with options",
    "text": "Using commands with options\nls -F\nDownloads/    Music/\nDocuments/    todo.txt\nPictures/     my_program*\nWe can modify output of ls by providing optional “flags”. In this example, the -F option tells ls to decorate the output to show what type of file each entry is. A trailing / indicates a directory, while a trailing * tells us the file is a runnable program. Depending on our setup, the shell might also use colors to indicate whether each entry is a file or directory.",
    "crumbs": [
      "Home",
      "Lecture 1: Introduction to MDS software and Bash"
    ]
  },
  {
    "objectID": "lectures/1-MDStools-bash-filesystem.html#lecture-1-activity-3",
    "href": "lectures/1-MDStools-bash-filesystem.html#lecture-1-activity-3",
    "title": "Introduction to MDS software and Bash",
    "section": "Lecture 1 Activity 3",
    "text": "Lecture 1 Activity 3",
    "crumbs": [
      "Home",
      "Lecture 1: Introduction to MDS software and Bash"
    ]
  },
  {
    "objectID": "lectures/1-MDStools-bash-filesystem.html#navigating-and-manipulating-the-filesystem-using-bash",
    "href": "lectures/1-MDStools-bash-filesystem.html#navigating-and-manipulating-the-filesystem-using-bash",
    "title": "Introduction to MDS software and Bash",
    "section": "Navigating and manipulating the filesystem using Bash",
    "text": "Navigating and manipulating the filesystem using Bash\nNavigating the filesystem can be done via your visual operating system’s user interface (e.g., Finder, Explorer, Nautilus, etc) or using a text-based shell such as Bash. In the lecture, we cover some of the most useful commands with the main goal of making you familiar with moving around using Bash. The most important commands that we covered are listed in the table below. Remember that you can press TAB to automatically complete commands and file names as you are typing.\n\nShell commands for navigating and manipulating the filesystem\n\n\n\nCommand\nPurpose\nExample use\n\n\n\n\npwd\nPrint Working Directory\npwd\n\n\nls\nLiSt contents\nls Documents\n\n\ncd\nChange Directory\ncd Desktop\n\n\nmkdir\nMaKe a DIRectory\nmkdir my-new-directory\n\n\nrm\nReMove a file\nrm file-to-remove\n\n\nmv\nMoVe a file\nmv file-to-move new-location\n\n\ncp\nCoPy a file\ncp file-to-copy copy-location\n\n\n\nTo read the documentation for a command, you can type man &lt;your_command&gt; or &lt;your_command&gt; --help (e.g., to get the help pages for the cp copy command, man cp or cp --help). In the bash configuration that you copied from the installation instructions, we have also included a few shortcuts (also called “aliases”) in the MDS installation instructions to make it easier to type commonly used commands. The two relevant ones for this section are\n\nl which lists details of all the files in the current directory and sorts them by modification time.\njl which is an alias for jupyter lab.\n\nDon’t worry if you have a hard time remembering some of these in the beginning. The key is to practice often, and when you forget a specific command you can type in the help command we have created mds-help in you terminal to see a list of all commands we use in MDS.\n\n\nUseful shell special characters\n\n\n\nSymbol\nDefinition\n\n\n\n\n.\nCurrent working directory\n\n\n..\nParent directory\n\n\n~\nHOME directory",
    "crumbs": [
      "Home",
      "Lecture 1: Introduction to MDS software and Bash"
    ]
  },
  {
    "objectID": "lectures/1-MDStools-bash-filesystem.html#lecture-1-activity-4",
    "href": "lectures/1-MDStools-bash-filesystem.html#lecture-1-activity-4",
    "title": "Introduction to MDS software and Bash",
    "section": "Lecture 1 Activity 4",
    "text": "Lecture 1 Activity 4",
    "crumbs": [
      "Home",
      "Lecture 1: Introduction to MDS software and Bash"
    ]
  },
  {
    "objectID": "lectures/1-MDStools-bash-filesystem.html#working-with-files-and-directories",
    "href": "lectures/1-MDStools-bash-filesystem.html#working-with-files-and-directories",
    "title": "Introduction to MDS software and Bash",
    "section": "Working with Files and Directories",
    "text": "Working with Files and Directories\nWe now know how to explore files and directories, but how do we create them? That’s what we will find out in this chapter.\ncd ~/Documents\n\n# MaKe Directory\nmkdir notes\n\nNaming guidelines\nLet’s go back to the ~/Documents directory and create a subfolder called notes. For this we first use the ~ home directory shortcut, and then the mkdir command.\nWe will talk more about useful naming conventions in module 6. For now it is enough if you remember these three guidelines.\n\nDon’t use spaces\nDon’t begin the name with a - (hyphen)\nStick to digits and letters (preferably lower case)\n\n\n\nCreating a file\nSince we just created the notes directory, ls doesn’t display anything when we ask for a listing of its contents.\nls -F notes\nLet’s change our working directory to notes, then use the VS Code editor to create a file called my-first-note.md. The command to invoke VS Code from the command line is code, and if we pass it a filename as an argument, the file will be created in the current directory. Now try launching it yourself!\ncd notes\ncode my-first-note.md\nThe .md syntax means that we want to create a markdown file. File extensions like .md and .py don’t change anything about the content of the file, but they are an indicator to other program such as VS Code what type of content we are going to put inside the file. These program can then activate special functions for certain files, such as using the appropriate colors to highlight headings and functions.\nLet’s move on to the next slide to see how it looks when we are editing file in VS Code.\n\n\nEditing a file in VS Code\nThis is what it looks like to edit a text file in VS Code. You will see that there is a small white circle next to the file name. This is an indication that the file is not saved yet.\nWhen we are done adding our edits, we can hit Ctrl + s to save the file, which will make the white circle disappear. After saving the file, you can optionally close VS Code before returning to the terminal.\nWe are only using VS Code as a simple text editor here, but it is worth knowing that you can use use it as a powerful editor for code as well.",
    "crumbs": [
      "Home",
      "Lecture 1: Introduction to MDS software and Bash"
    ]
  },
  {
    "objectID": "lectures/1-MDStools-bash-filesystem.html#viewing-the-content-of-a-file-in-the-terminal",
    "href": "lectures/1-MDStools-bash-filesystem.html#viewing-the-content-of-a-file-in-the-terminal",
    "title": "Introduction to MDS software and Bash",
    "section": "Viewing the content of a file in the terminal",
    "text": "Viewing the content of a file in the terminal\nls\nmy-first-note.md\n\nhead my-first-note.md\nThese are the first\nfew lines of content\nin the file.\nNotes: If we now type ls we will see the name of the file we just created in VS Code. To see the content of the file, we can use the head command. head show the first few lines of a file (just as when we use df.head() in pandas), and optionally takes an argument for how many lines to show: head -n 10 (the default is five).\nhead works with all plain text files, such as code and markdown files, but not with binary files such as word documents, spreadsheets, or images. To see the last few lines, you can use tail instead of head.",
    "crumbs": [
      "Home",
      "Lecture 1: Introduction to MDS software and Bash"
    ]
  },
  {
    "objectID": "lectures/1-MDStools-bash-filesystem.html#moving-files-and-directories",
    "href": "lectures/1-MDStools-bash-filesystem.html#moving-files-and-directories",
    "title": "Introduction to MDS software and Bash",
    "section": "Moving files and directories",
    "text": "Moving files and directories\nmv my-first-note.md ..\nls ..\nDownloads/    Music/        my-first-note.md\nDocuments/    todo.txt\nPictures/     my_program*\n\nmv ../my-fist-note.md .\nls\nmy-fist-note.md\nTo move a file around, we can use the mv command. For example, to move the text file we just created to the parent directory, we would type:\nmv my-first-note.md ..\nThis moves it to the parent directory, and keeps the name the same as we can see if we do ls ..\nIf we want to move the file back to the current directory, we can use the . shortcut:\nmv ../my-fist-note.md .",
    "crumbs": [
      "Home",
      "Lecture 1: Introduction to MDS software and Bash"
    ]
  },
  {
    "objectID": "lectures/1-MDStools-bash-filesystem.html#renaming-a-file",
    "href": "lectures/1-MDStools-bash-filesystem.html#renaming-a-file",
    "title": "Introduction to MDS software and Bash",
    "section": "Renaming a file",
    "text": "Renaming a file\nmv my-fist-note.md note_2022-06-20.md\nls\nnote_2022-06-20.md\n\nmv -v notte_2022-06-20.md note_2022-06-20.md\nrenamed 'notte_2022-06-20.md' -&gt; 'note_2022-06-20.md'\nNotes: Renaming a file can be thought of as moving it to a new filename either in the same or a different directory. This might initially seem a bit different from a graphical file browser, where renaming and moving are two distinct functions, but the underlying operation is actually the same.\nTo give our file a more descriptive name that includes the date we created this file, we would type mv my-fist-note.md notte_2022-06-20.md. We intentionally made a typo here, let’s fix it while showing off the functionality of the -v (verbose) option, which prints what was moved/renamed so that it is easier to keep track of renamed 'notte_2022-06-20.md' -&gt; 'note_2022-06-20.md'.\nWe must be careful when specifying the destination because mv will overwrite existing files without warning. The option -i (“interactive”) makes mv ask us for confirmation before overwriting,. mv also works on directories where it renames the directory without changing its contents.",
    "crumbs": [
      "Home",
      "Lecture 1: Introduction to MDS software and Bash"
    ]
  },
  {
    "objectID": "lectures/1-MDStools-bash-filesystem.html#copying-files-and-directories",
    "href": "lectures/1-MDStools-bash-filesystem.html#copying-files-and-directories",
    "title": "Introduction to MDS software and Bash",
    "section": "Copying files and directories",
    "text": "Copying files and directories\n# Copy the file to the parent directory\ncp note_2022-06-20.md ..\n\n# Create a backup copy in the same directory\ncp note_2022-06-20.md note_2022-06-20.md.bkp\nls\nnote_2022-06-20.md\nnote_2022-06-20.md.bkp\nNotes: The cp command create a copy of a file. Just as with mv, we optionally rename the file as we are copying it.\nHere we first copy the note we created to the parent directory and then show how we could use cp to create a backup of our file in the same directory. Remember that the file extension does not change the content of the file, so this is just a visual indicator to us for what type of file this is.\nIf we ever wanted to copy a directory, we would have to specify the -r flag, which indicates that we want to copy the directory recursively, i.e. also making a copy of all the directory contents.",
    "crumbs": [
      "Home",
      "Lecture 1: Introduction to MDS software and Bash"
    ]
  },
  {
    "objectID": "lectures/1-MDStools-bash-filesystem.html#wildcards",
    "href": "lectures/1-MDStools-bash-filesystem.html#wildcards",
    "title": "Introduction to MDS software and Bash",
    "section": "Wildcards",
    "text": "Wildcards\ntouch note_2022-06-20.md.bkp note_2022-07-02.md note_2022-07-02.md.bkp\nls *.bkp\nnote_2022-06-20.md.bkp\nnote_2022-07-02.md.bkp\n\nls *07*\nnote_2022-07-02.md\nnote_2022-07-02.md.bkp\nWildcards (also called “globbing”) simplifies targeting multiple files with similar names in the same command. The most commonly used wildcard is * (a single asterisk). It matches zero or more characters, so typing ls *.md list all of the markdown files in the current directory.\nIf we wanted to list all the files created in July (month 7), we would need to type ls ls *07*, which means that the filename can include anything before and after 07. If we would have left out the second * and type ls *07 we would not have seen any matches because there is not file that end in 07, they all have some characters after.\nUsing wildcards is helpful when we want to delete, move, or copy files with a predictable naming pattern.",
    "crumbs": [
      "Home",
      "Lecture 1: Introduction to MDS software and Bash"
    ]
  },
  {
    "objectID": "lectures/1-MDStools-bash-filesystem.html#searching-for-text-patterns-in-files",
    "href": "lectures/1-MDStools-bash-filesystem.html#searching-for-text-patterns-in-files",
    "title": "Introduction to MDS software and Bash",
    "section": "Searching for text patterns in files",
    "text": "Searching for text patterns in files\ngrep \"the\" note_2022-06-22.md\nnote_2022-06-22.md:These are the first\nnote_2022-06-22.md:in the file.\nWe can use the grep command to search for text in files. To search for the word “the” in our notes file, we can type grep \"the\" note_2022-06-22.md. This will return every line in the file that contains the word “the”.",
    "crumbs": [
      "Home",
      "Lecture 1: Introduction to MDS software and Bash"
    ]
  },
  {
    "objectID": "lectures/1-MDStools-bash-filesystem.html#seeing-the-history-of-commands",
    "href": "lectures/1-MDStools-bash-filesystem.html#seeing-the-history-of-commands",
    "title": "Introduction to MDS software and Bash",
    "section": "Seeing the history of commands",
    "text": "Seeing the history of commands\nhistory\n1  pwd\n2  ls\n3  cd Documents/\n4  cd\n5  ls -F -a\n6  history\nOccasionally, we might want to re-use a command that we used in the past, but don’t remember exactly what it was. The history command can help us with this as it lists all the previous commands we have run and in which order we ran them.",
    "crumbs": [
      "Home",
      "Lecture 1: Introduction to MDS software and Bash"
    ]
  },
  {
    "objectID": "lectures/1-MDStools-bash-filesystem.html#reading-the-manual",
    "href": "lectures/1-MDStools-bash-filesystem.html#reading-the-manual",
    "title": "Introduction to MDS software and Bash",
    "section": "Reading the manual",
    "text": "Reading the manual\nman ls\nLS(1)                                                    User Commands\n\nNAME\n       ls - list directory contents\n\nSYNOPSIS\n       ls [OPTION]... [FILE]...\n\nDESCRIPTION\n       List  information  about the FILEs (the current directory by default).  Sort entries alphabetically if none of -cftuvSUX\n       nor --sort is specified.\n\n       Mandatory arguments to long options are mandatory for short options too.\n\n       -a, --all\n              do not ignore entries starting with .\n\n       -A, --almost-all\n              do not list implied . and ..\n\n       --author\n              with -l, print the author of each file\n\n       -b, --escape\n              print C-style escapes for nongraphic characters\n\n       --block-size=SIZE\n              with -l, scale sizes by SIZE when printing them; e.g., '--block-size=M'; see SIZE format below\n\n       -B, --ignore-backups\n              do not list implied entries ending with ~\n...\nHow can we find out what options like -t and -r do if we don’t know of them already? By reading the built-in help manual! Typing man ls brings up the manual help page for the ls command. You can navigate these pages with Space to go down and b to go Back up. q quits the manual and takes you back to the shell prompt.\nTyping / starts a search. Type in the search term and press Enter to be taken to the first hit. To continue to the next search hit, press n, and to go to the previous, press shift + n.",
    "crumbs": [
      "Home",
      "Lecture 1: Introduction to MDS software and Bash"
    ]
  },
  {
    "objectID": "lectures/1-MDStools-bash-filesystem.html#relative-vs-absolute-path",
    "href": "lectures/1-MDStools-bash-filesystem.html#relative-vs-absolute-path",
    "title": "Introduction to MDS software and Bash",
    "section": "Relative vs absolute path",
    "text": "Relative vs absolute path\nYou are here:\npwd\n/Users/timberst/Documents\nThese are the files in your current working directory:\nls\nDSCI-100  MDS-2018-19   textbooks   research\nYou can navigate to the research directory using one of two options, a relative path:\ncd research\nor, using an absolute path:\ncd /Users/timberst/Documents/research\nWhat is the difference? When you use a relative path with a command like ls or cd, it tries to find that location from where we are, rather than from the root of the file system. However, when you specify the absolute path to a directory by including its entire path from the root directory, which is indicated by a leading slash, The leading / tells the computer to follow the path from the root of the file system, so it always refers to exactly one directory, no matter where we are when we run the command.",
    "crumbs": [
      "Home",
      "Lecture 1: Introduction to MDS software and Bash"
    ]
  },
  {
    "objectID": "lectures/1-MDStools-bash-filesystem.html#lecture-1-activity-5",
    "href": "lectures/1-MDStools-bash-filesystem.html#lecture-1-activity-5",
    "title": "Introduction to MDS software and Bash",
    "section": "Lecture 1 Activity 5",
    "text": "Lecture 1 Activity 5",
    "crumbs": [
      "Home",
      "Lecture 1: Introduction to MDS software and Bash"
    ]
  },
  {
    "objectID": "lectures/1-MDStools-bash-filesystem.html#references",
    "href": "lectures/1-MDStools-bash-filesystem.html#references",
    "title": "Introduction to MDS software and Bash",
    "section": "References",
    "text": "References\n\nhttps://merely-useful.tech/py-rse/bash-tools.html\nhttps://missing.csail.mit.edu/\nhttps://datascienceatthecommandline.com/2e/chapter-1-introduction.html\nhttps://datascienceatthecommandline.com/resources/50-reasons.pdf",
    "crumbs": [
      "Home",
      "Lecture 1: Introduction to MDS software and Bash"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "DSCI 521: Computing Platforms for Data Science",
    "section": "",
    "text": "How to install, maintain, and use the data scientific software “stack”. The Unix operating system, integrated development environments, and problem solving strategies."
  },
  {
    "objectID": "index.html#course-learning-objectives",
    "href": "index.html#course-learning-objectives",
    "title": "DSCI 521: Computing Platforms for Data Science",
    "section": "Course Learning Objectives",
    "text": "Course Learning Objectives\n\nUse the Unix command line to navigate their computer’s filesystem.\nDefine and distinguish between absolute file paths and relative file paths.\nEffectively use local and remote version control software (e.g., Git and GitHub) to organize projects and manage file versions.\nCreate, edit and run reproducible literate Python and R code documents (e.g., reports and presentations) using Jupyter and RMarkdown.\nWrite and edit Markdown and in-line LaTeX syntax within literate code documents.\nDefine and correctly use a project working directory.\nDiagnose and troubleshoot programming and development environment problems, and explain how such problems can be avoided."
  },
  {
    "objectID": "index.html#lesson-learning-objectives-and-readings",
    "href": "index.html#lesson-learning-objectives-and-readings",
    "title": "DSCI 521: Computing Platforms for Data Science",
    "section": "Lesson Learning Objectives and Readings",
    "text": "Lesson Learning Objectives and Readings\nLesson 0\n\nLaunch JupyterLab\nUse the Notebook interface inside Jupyterlab\nKnow your way around the JupyterLab user interface\n\nLesson 1\n\nRecognize the directory hierarchy as it is commonly represented in diagrams, paths, and file explorer software.\nDistinguish common operators and representations of the different filesystem elements typically used in Bash.\nExplore the filesystem using Bash commands as ls, pwd and cd.\nTranslate an absolute path into a relative path and vice versa.\nUse command-line arguments to produce alternative outputs of commands.\nCreate, edit, move, and delete files and folders using the command line and VS Code.\n\n\nThe Unix Shell: Navigating Files and Directories or The shell\nIntroduce yourself to Git\nConnect to GitHub\nJupyter Notebook Tutorial: The Definitive Guide\n\nLesson 2\n\nImplement SSH authentication\nDifferentiate between the use of GitHub as a remote hosting service for version control and Git as a version control system.\nCreate a Git repository.\nImplement Git’s clone, add, status, commit, pull, and push operations on the command line and their equivalent use in VS Code.\nUnderstand what implies using the staging area in a Git workflow.\nRecognize the commit as the primary building block for storing a project version characterized by an attached message and a hash that serves as a unique identifier.\n\n\nExcuse me, do you have a moment to talk about version control? by Jenny Bryan\nComparing commits across time\nResolving a merge conflict using the command line\nnbdime – diffing and merging of Jupyter Notebooks\n\nLesson 3\n\nExplore the Git history via git log in the terminal and GitHub.\nCompare commits using git diff in the terminal and GitHub.\nSolve merge conflicts at the command line and in VS Code.\nSave transitory changes with git stash.\nManage to avoid pushing specific local files by including a .gitignore.\nDifferenciate among different ways to restore your project history (git reset --hard/--soft, git revert) when working on an older version of a project.\n\n\nComparing commits across time\nResolving a merge conflict using the command line\nnbdime – diffing and merging of Jupyter Notebooks\n\nLesson 4\n\nUse the quarto terminal command to create different quarto projects\nCreate and edit a Quarto website\nDiscover how GitHub can be used to serve static websites\nModify a GitHub repository to publish a website\n\n\nQuarto Guides\nGetting Started with GitHub Pages\n\nLesson 5\n\nCreate RProjects in Rstudio using here to define robust file paths.\nDetect the basic components of a dynamic document in Jupyter Notebooks and in R Markdown\nExplain markdown usage in relation to dynamic documents\nDifferentiate between code chunks and code cells in Rmarkdown and Jupyter Notebooks.\nSelect appropiate code chunk options for RMarkdown.\nUse semantic line breaks for version control files\nSpecify metadata in the YAML header block\n\n\nUsing RStudio Projects\nR Markdown Cheat Sheet\nR Markdown home page\nR Markdown: The Definitive Guide\nR Markdown code chunk options\nWhat they forgot to teach you about R\nConnect RStudio to Git and GitHub\nR-cubed rostools workshop\n\nLesson 6\n\nUnderstand how Quarto extend RMarkdown documents functionalities.\nExplore different data science products to communicate your results: slides, blogs and books.\nCreate slides using Jupyter Notebook and Quarto slides with reveal.js\nCreate a Jupyter Book and a Quarto books.\nCreate a Quarto Blog.\nSharing rendered HTML files publicly via GitHub Pages.\n\n\nR Markdown presentations with xaringan\nJupyter presentations\nQuarto Presentations\n\nLesson 7\n\nUnderstand what is a computational environment and how can ensure the reproducibility of a project\nDifferenciate Python, Anaconda, MiniConda, Conda and pip\nManage packages and environments in Python using Conda\nManage packages and environments in R using renv\n\n\nconda environemnts\nrenv\nWorkflow: projects\n\nLesson 8\n\nRegex\nRegex test\nPracticing Regex\nThree tips for posting good questions to R-help and Stack Overflow\nHow to create a Minimal, Complete, and Verifiable example\nGood Enough Practices in Scientific Computing\n.gitignore"
  },
  {
    "objectID": "index.html#attributions",
    "href": "index.html#attributions",
    "title": "DSCI 521: Computing Platforms for Data Science",
    "section": "Attributions",
    "text": "Attributions\nMaterials were inspired, re-used and re-mixed from the following sources: - Software Carpentry, specifically the Unix Shell and Git lessons - Happy Git and GitHub for the useR by Jenny Bryan and the STAT 545 TAs - Data 8: The Foundations of Data Science, specifically Lab 01 - Data Carpentry Reproducible Science Workshop"
  },
  {
    "objectID": "index.html#license",
    "href": "index.html#license",
    "title": "DSCI 521: Computing Platforms for Data Science",
    "section": "License",
    "text": "License\nThe UBC Master of Data Science DSCI 521: Computing Platforms for Data Science course materials here are licensed under the Creative Commons Attribution 2.5 Canada License (CC BY 2.5 CA). If re-using/re-mixing please provide attribution and link to this webpage."
  },
  {
    "objectID": "lectures/0-jupyterlab-orientation-intro.html",
    "href": "lectures/0-jupyterlab-orientation-intro.html",
    "title": "JupyterLab Orientation",
    "section": "",
    "text": "Launch JupyterLab\nUse the Notebook interface inside Jupyterlab\nKnow your way around the JupyterLab user interface\n:::",
    "crumbs": [
      "Home",
      "Lecture 0: JupyterLab Orientation"
    ]
  },
  {
    "objectID": "lectures/0-jupyterlab-orientation-intro.html#learning-objectives",
    "href": "lectures/0-jupyterlab-orientation-intro.html#learning-objectives",
    "title": "JupyterLab Orientation",
    "section": "",
    "text": "Launch JupyterLab\nUse the Notebook interface inside Jupyterlab\nKnow your way around the JupyterLab user interface",
    "crumbs": [
      "Home",
      "Lecture 0: JupyterLab Orientation"
    ]
  },
  {
    "objectID": "lectures/0-jupyterlab-orientation-intro.html#what-is-jupyterlab",
    "href": "lectures/0-jupyterlab-orientation-intro.html#what-is-jupyterlab",
    "title": "JupyterLab Orientation",
    "section": "What is JupyterLab",
    "text": "What is JupyterLab\nThe most rudimentary interaction with programming languages such as R and Python is via interactive shells run from a terminal. This provides access to the full functionality of the language, but is a barebones experience without any conveniences added. If you want to edit a script or view a plot that you created, you need to open a text editor and image viewer separately.\nIf you prefer a more holistic experience, with many of conveniences nicely organized in the same interface, you can use an integrated development environment (or IDE for short). IDEs often include a shell, a file browser, debugging tools, version control, a text editor with autocompletion and syntax highlighting, and an area where plots show up. A core idea of IDEs is to provide all the tools you need in one place. Commons IDEs that you might have heard of include Visual Studio Code and RStudio. This lesson will discuss JupyterLab, which is and IDE to work with many programming languages, including R, Python, Julia, and many more. A core concept tightly linked to JupyterLab are Jupyter Notebooks, which will be one of the main topics in this talk. Let’s see how we can launch them.",
    "crumbs": [
      "Home",
      "Lecture 0: JupyterLab Orientation"
    ]
  },
  {
    "objectID": "lectures/0-jupyterlab-orientation-intro.html#how-to-access-jupyterlab",
    "href": "lectures/0-jupyterlab-orientation-intro.html#how-to-access-jupyterlab",
    "title": "JupyterLab Orientation",
    "section": "How to Access JupyterLab",
    "text": "How to Access JupyterLab\nYou can access JupyterLab from an online remote server or a local machine.\n\nOnline Server\nWe could install and run JupyterLab just like any other program on Windows, MacOS, or Linux. However, one of the advantages of JupyterLab is that it is easy to use without installing anything. To try JupyterLab, use your web browser to visit the UBC Jupyter Server and login with your CWL (Firefox, and Chrome are supported). You can also try JupyterLab throught Porject Jupyter: https://jupyter.org/try\n\n\nLocal Machine\nIf you have already completed the installation instructions, you can open the terminal and run:\njupyter lab\nJupyterLab will open in a browser whether you run it locally or you are using it through UBC server. Note that if you are running JupyterLab in your machine, the URL could be similar to https://localhost:8888/lab. In this case localhost is referring to your computer, not to a webpage.",
    "crumbs": [
      "Home",
      "Lecture 0: JupyterLab Orientation"
    ]
  },
  {
    "objectID": "lectures/0-jupyterlab-orientation-intro.html#using-jupyter-notebooks",
    "href": "lectures/0-jupyterlab-orientation-intro.html#using-jupyter-notebooks",
    "title": "JupyterLab Orientation",
    "section": "Using Jupyter Notebooks",
    "text": "Using Jupyter Notebooks\n\nWe’re greeted by the launcher tab where we see that we can start either a Notebook or Console for Python or R, as well as some other utility programs. Let’s start by explaining one of the most popular options, the Jupyter Notebook. The Notebook provides and interface where you can mix text, code, mathematical expressions, plot output, videos, and more, all in the same file. So instead of the traditional IDE experience where you would write code in a text file and then have figures pop up in a different panel, this information now all resides in the same document, which facilitates reproducibility and collaboration. The Notebooks can be exported to many formats, including PDF and HTML, which makes it easy to share your project with anyone. The cell that is encircled in blue is where we can input Python code, click here and type any mathematical expression, and then run the cell by clicking the play button in the top toolbar:\n\n3 + 4\n\n7\n\n\n\nAs you can see, the output is returned just under input, and a new input cell was created. We could also have clicked the plus sign to create a new cell. Here, we can do anything we can do in Python, e.g. variable assignment:\n\na = 5\n\nThere is no output because we just assigned a value to a variable, without asking for the value of that variable, which we can do by typing out the variable name:\n\na\n\n5\n\n\nJupyter Notebooks also supports editing code on multiple lines, so we could have done this instead:\n\na = 3\na\n\n3\n\n\n\nYou might have noticed that there is a little counter on the left of each cell. This counter keeps track of in which order the cells were executed, so that you are aware if cells have been run out of sequential order. The counter symbol changes to an * when a computation is running, to indicate that Python is busy and won’t be able to execute new cells until the current one finishes (the delay is only noticeable for longer computations).\nWe can also click this blue bar to the left to collapse and expand the output and input. This can be handy if we have a long code cell, or some notes that we’re planning on moving later.\n\nThe notebook is saved automatically every two minutes, and it can be saved manually by clicking the floppy disk symbol in the toolbar, or by hitting Ctrl + s. Both input and output cells are saved, so any plots that you make will be present in the notebook next time you open it, without needing to rerun the code cells.\nOther important icons in the toolbar are the ones to cut, copy, and paste a cell. If you want to get rid of a cell, you can cut it out without pasting in back in.\nThe remaining icons are:\n\nplay: to run a cell (which we already used),\nstop: which we can use if a cells has gotten stuck running some code and we want to interrupt it,\nrestart: which restarts the background Python process that is connected to the notebook (so if we click this, our variables will need to be redefined),\nrestart and run all: this is really important and should always be executed before sharing a notebook, to make sure that everything will work when someone else runs it from top to bottom, since the cells can be executed out of order.\n\nYou can also access these by right clicking on a cell.\n\nWorking with text via Markdown cells\nYou can change the input cell type from Python code to Markdown by clicking on the little dropdown menu in the toolbar that reads Code.\n\nMarkdown is a simple formatting system which allows you to document your analysis within the notebook. This is also great for creating tutorials and even books as we will see later. It is a plain text format that includes brief markup tags that indicates how text should be rendered, e.g. * indicates italics and ** indicates bold typeface. If you have commented on online forums or used a chat application, you might already be familiar with markdown. Below is a short example of the syntax:\n#### Markdown Example: Heading Level Four\n\n- A bullet point\n- *Emphasis in italics*\n- **Strong emphasis in bold**\n- This is a [link to learn more about markdown](https://guides.github.com/features/mastering-markdown/).\n- Support for $\\LaTeX$ equations:\n$$f'(a) = \\lim_{x \\to a} \\frac{f(x) - f(a)}{x-a}$$\nwill be rendered as:\n\nMarkdown Example: Heading Level Four\n\nA bullet point\nEmphasis in italics\nStrong emphasis in bold\nThis is a link to learn more about markdown.\nSupport for \\(\\LaTeX\\) equations: \\[f'(a) = \\lim_{x \\to a} \\frac{f(x) - f(a)}{x-a}\\]",
    "crumbs": [
      "Home",
      "Lecture 0: JupyterLab Orientation"
    ]
  },
  {
    "objectID": "lectures/0-jupyterlab-orientation-intro.html#lecture-0-activity-1",
    "href": "lectures/0-jupyterlab-orientation-intro.html#lecture-0-activity-1",
    "title": "JupyterLab Orientation",
    "section": "Lecture 0 Activity 1",
    "text": "Lecture 0 Activity 1",
    "crumbs": [
      "Home",
      "Lecture 0: JupyterLab Orientation"
    ]
  },
  {
    "objectID": "lectures/0-jupyterlab-orientation-intro.html#jupyterlab-sidebars",
    "href": "lectures/0-jupyterlab-orientation-intro.html#jupyterlab-sidebars",
    "title": "JupyterLab Orientation",
    "section": "JupyterLab sidebars",
    "text": "JupyterLab sidebars\nNow that you know the basics of how to work inside Jupyter Notebooks, let’s continue explorer the JupyterLab user interface.\n\nLeft sidebar\n\nExtension Manager\n\nThe puzzle piece at the bottom is where you can install extensions.\n\nTable of Contents\n\nIt allows navigate the structure of the document easily.\n\nGit\n\nGit version control interface.\n\nRunning terminals and kernels\n\nOverview of all running applications.\n\nFile browser\n\nThe topmost icon in the sidebar to the left shows the file tree of your current folder, highlights include:\n\nthe icon for uploading files from your computer to the UBC Jupyter server (or your folder if you run locally)\nright clicking a file to download it to your computer\nclicking the + sign takes us back to the launcher menu where we started\n\n\n\nRight sidebar\n\nProperty Inspector:\n\nThis is a bit more advanced as it allows you to add metadata to cells.\nOne aspect worth highlighting here is the ability to denote cells as part of a slide show, that you can download via File -&gt; Export notebook as.\n\nDebugger",
    "crumbs": [
      "Home",
      "Lecture 0: JupyterLab Orientation"
    ]
  },
  {
    "objectID": "lectures/0-jupyterlab-orientation-intro.html#additional-jupyterlab-applications",
    "href": "lectures/0-jupyterlab-orientation-intro.html#additional-jupyterlab-applications",
    "title": "JupyterLab Orientation",
    "section": "Additional JupyterLab applications",
    "text": "Additional JupyterLab applications\nJupyterLab can run applications other than notebooks, e.g. there is a Python console, a text editor, and a terminal emulator. These can be opened via the launcher page or File --&gt; New. Applications can be placed side by side by dragging and dropping their windows, so we could be running a terminal and notebook next to each other.\nThe Command palette enable users to invoke commands directly:\n\nWindows/Linux: Ctrl + Shift + C\nMac: ⌘ + Shift + C\nView --&gt; Activate Command Palette\n\n\nHow to get help in the notebook\nOne application that is especially helpful to run next to a notebook is the Contextual Help. This application displays documentation automatically as you type. When you’re using unfamiliar packages and functions, it is a good habit to leave the Contextual Help open next to the notebook. If you don’t like having a split screen, you can instead press Shift + Tab to bring up a help dialogue. JupyterLab also supports tab completion, you can start typing a name and then press tab to see suggestions to expand to. Additional help is available via the “Help” menu, which links to useful online resources (for example Help --&gt; JupyterLab Reference).\n\n\n\n\n\n\nNote\n\n\n\nNote about UBC Jupyter Server:\nAll your files will be saved between restarts, but any Python packages you have installed yourself will be reset, so you need to contact UBC IT to have additional Python packages installed with persistence.",
    "crumbs": [
      "Home",
      "Lecture 0: JupyterLab Orientation"
    ]
  },
  {
    "objectID": "lectures/2-git-github-ssh-basic-workflow.html",
    "href": "lectures/2-git-github-ssh-basic-workflow.html",
    "title": "Introduction to version control with Git and GitHub",
    "section": "",
    "text": "Implement SSH authentication\nDifferentiate between the use of GitHub as a remote hosting service for version control and Git as a version control system.\nCreate a Git repository.\nImplement Git’s clone, add, status, commit, pull, and push operations on the command line and their equivalent use in VS Code.\nUnderstand what implies using the staging area in a Git workflow.\nRecognize the commit as the primary building block for storing a project version characterized by an attached message and a hash that serves as a unique identifier.",
    "crumbs": [
      "Home",
      "Lecture 2: Introduction to version control with Git and GitHub"
    ]
  },
  {
    "objectID": "lectures/2-git-github-ssh-basic-workflow.html#lecture-objectives",
    "href": "lectures/2-git-github-ssh-basic-workflow.html#lecture-objectives",
    "title": "Introduction to version control with Git and GitHub",
    "section": "",
    "text": "Implement SSH authentication\nDifferentiate between the use of GitHub as a remote hosting service for version control and Git as a version control system.\nCreate a Git repository.\nImplement Git’s clone, add, status, commit, pull, and push operations on the command line and their equivalent use in VS Code.\nUnderstand what implies using the staging area in a Git workflow.\nRecognize the commit as the primary building block for storing a project version characterized by an attached message and a hash that serves as a unique identifier.",
    "crumbs": [
      "Home",
      "Lecture 2: Introduction to version control with Git and GitHub"
    ]
  },
  {
    "objectID": "lectures/2-git-github-ssh-basic-workflow.html#why-version-control",
    "href": "lectures/2-git-github-ssh-basic-workflow.html#why-version-control",
    "title": "Introduction to version control with Git and GitHub",
    "section": "Why version control?",
    "text": "Why version control?\n\nsource: “Piled Higher and Deeper” by Jorge Cham, http://www.phdcomics.com\nTo version control a project, you need two main components: a version control system and a repository hosting service. The version control system, like Git, manages changes to the project, allowing you to share updates, receive contributions, and resolve conflicts. A repository hosting service, such as GitHub, stores your project online, facilitating remote access, collaboration, and distribution of your final product. While technically optional, using a hosting service offers significant advantages like access management, bug tracking, external contributions, and secure cloud backup. Given their benefits and the availability of free accounts, there are few reasons not to utilize a hosting service for your project.",
    "crumbs": [
      "Home",
      "Lecture 2: Introduction to version control with Git and GitHub"
    ]
  },
  {
    "objectID": "lectures/2-git-github-ssh-basic-workflow.html#remotely-accessing-another-computer-using-ssh",
    "href": "lectures/2-git-github-ssh-basic-workflow.html#remotely-accessing-another-computer-using-ssh",
    "title": "Introduction to version control with Git and GitHub",
    "section": "Remotely accessing another computer using SSH",
    "text": "Remotely accessing another computer using SSH\nLet’s start with some definitions:\n\nDefinitions\nSecure SHell (SSH) - a common method for remote login to another computer which is secure.\nserver - a machine you are SSHing into. The server sits and waits to be contacted.\nclient - usually your machine. The client initiates contact with the server.",
    "crumbs": [
      "Home",
      "Lecture 2: Introduction to version control with Git and GitHub"
    ]
  },
  {
    "objectID": "lectures/2-git-github-ssh-basic-workflow.html#review---password-based-authentication",
    "href": "lectures/2-git-github-ssh-basic-workflow.html#review---password-based-authentication",
    "title": "Introduction to version control with Git and GitHub",
    "section": "Review - password-based authentication",
    "text": "Review - password-based authentication\nPasswords are often short and relatively easy to guess or “break.” For instance, consider a password with 12 characters, where each character can be one of 26 uppercase letters, 26 lowercase letters, 10 digits, or approximately 10 special characters. This results in around 70 possible choices per character, making the total number of possible combinations approximately \\(70^{12}\\approx 10^{22}\\). While this is an extraordinarily large number, patterns in password creation can make them more predictable and easier to guess. More detailed discussions on security and privacy will be covered in future courses.",
    "crumbs": [
      "Home",
      "Lecture 2: Introduction to version control with Git and GitHub"
    ]
  },
  {
    "objectID": "lectures/2-git-github-ssh-basic-workflow.html#ssh-key-based-authentication",
    "href": "lectures/2-git-github-ssh-basic-workflow.html#ssh-key-based-authentication",
    "title": "Introduction to version control with Git and GitHub",
    "section": "SSH key-based authentication",
    "text": "SSH key-based authentication\nSSH key-based authentication involves two components: a public key and a private key. These keys have an asymmetrical relationship. The public key cannot decrypt messages that are encrypted using the private key. Conversely, the private key can decrypt messages that are encrypted using the public key. This setup ensures secure communication by allowing only the holder of the private key to access messages encrypted with the public key.",
    "crumbs": [
      "Home",
      "Lecture 2: Introduction to version control with Git and GitHub"
    ]
  },
  {
    "objectID": "lectures/2-git-github-ssh-basic-workflow.html#understanding-public-key-private-key-concepts",
    "href": "lectures/2-git-github-ssh-basic-workflow.html#understanding-public-key-private-key-concepts",
    "title": "Introduction to version control with Git and GitHub",
    "section": "Understanding public key private key concepts",
    "text": "Understanding public key private key concepts\nConsider the public key not as a key but as a padlock. You can make copies of this padlock and place them wherever you like. To secure another machine with your padlock, you would copy it to the authorized_keys file in the ~/.ssh folder on that machine. Conversely, think of the private key as an actual key, which is used to unlock the padlock stored on the other machine. This arrangement ensures secure access to the machine that holds the corresponding padlock.\n\nsource: http://blakesmith.me/2010/02/08/understanding-public-key-private-key-concepts.html",
    "crumbs": [
      "Home",
      "Lecture 2: Introduction to version control with Git and GitHub"
    ]
  },
  {
    "objectID": "lectures/2-git-github-ssh-basic-workflow.html#you-can-put-your-lock-at-many-places",
    "href": "lectures/2-git-github-ssh-basic-workflow.html#you-can-put-your-lock-at-many-places",
    "title": "Introduction to version control with Git and GitHub",
    "section": "You can put your lock at many places",
    "text": "You can put your lock at many places\nAs long as you are using the same lock (public key), you will be able to open it with the same private key.\n source: http://blakesmith.me/2010/02/08/understanding-public-key-private-key-concepts.html",
    "crumbs": [
      "Home",
      "Lecture 2: Introduction to version control with Git and GitHub"
    ]
  },
  {
    "objectID": "lectures/2-git-github-ssh-basic-workflow.html#how-the-lock-works",
    "href": "lectures/2-git-github-ssh-basic-workflow.html#how-the-lock-works",
    "title": "Introduction to version control with Git and GitHub",
    "section": "How the lock works",
    "text": "How the lock works\nSSH keys are generated using the ssh-keygen command, which creates a pair consisting of a private key (usually named id_rsa) and a public key (typically called id_rsa.pub). You can distribute copies of the public key, which acts like a padlock, to other machines. When you attempt to connect, the other machine encrypts a challenge message using your public key. To gain access, you must demonstrate that you can decrypt this message, thereby proving possession of the corresponding private key. This process ensures that the connection is both secure and authorized.",
    "crumbs": [
      "Home",
      "Lecture 2: Introduction to version control with Git and GitHub"
    ]
  },
  {
    "objectID": "lectures/2-git-github-ssh-basic-workflow.html#why-ssh-keys-over-passwords",
    "href": "lectures/2-git-github-ssh-basic-workflow.html#why-ssh-keys-over-passwords",
    "title": "Introduction to version control with Git and GitHub",
    "section": "Why SSH keys over passwords",
    "text": "Why SSH keys over passwords\nSSH keys use the RSA cryptosystem\nThe private key is much longer than a password. A standard now is 4096-bit keys, which means \\(&gt; 10^{1200}\\) possibilities. This makes it harder for a hacker to break (guess) the password. More on this when we discuss binary numbers next week.\nAside: Quantum computers will be able to break RSA encryption. It is very hard to predict whether this is years or decades away.",
    "crumbs": [
      "Home",
      "Lecture 2: Introduction to version control with Git and GitHub"
    ]
  },
  {
    "objectID": "lectures/2-git-github-ssh-basic-workflow.html#keeping-your-private-key-safe",
    "href": "lectures/2-git-github-ssh-basic-workflow.html#keeping-your-private-key-safe",
    "title": "Introduction to version control with Git and GitHub",
    "section": "Keeping your private key safe",
    "text": "Keeping your private key safe\n\nssh-keygen allows you to put a password or passphrase on the private key\nthis should be shared with NO ONE!\nif your private key does fall into the wrong hands, the person must still know the password or passphrase to use the private key\n\n source - https://xkcd.com/936/",
    "crumbs": [
      "Home",
      "Lecture 2: Introduction to version control with Git and GitHub"
    ]
  },
  {
    "objectID": "lectures/2-git-github-ssh-basic-workflow.html#lecture-2-activity-1",
    "href": "lectures/2-git-github-ssh-basic-workflow.html#lecture-2-activity-1",
    "title": "Introduction to version control with Git and GitHub",
    "section": "Lecture 2 Activity 1",
    "text": "Lecture 2 Activity 1",
    "crumbs": [
      "Home",
      "Lecture 2: Introduction to version control with Git and GitHub"
    ]
  },
  {
    "objectID": "lectures/2-git-github-ssh-basic-workflow.html#cloning-repositories-from-github",
    "href": "lectures/2-git-github-ssh-basic-workflow.html#cloning-repositories-from-github",
    "title": "Introduction to version control with Git and GitHub",
    "section": "Cloning repositories from GitHub",
    "text": "Cloning repositories from GitHub\nIf you only need to make minor edits, you can directly edit files on GitHub using their online editor, eliminating the need to clone the repository.\nHowever, if you intend to run the code on your own machine and make modifications there, you will need to clone the repository to facilitate these changes.\nTo clone a repository, follow these steps!\nStep 1: start by navigating to the specific repository on GitHub.\nStep 2: Click the green “Clone or download” button, ensuring the pop-up indicates “Clone with HTTPS” (we will cover SSH authentication later).\nStep 3: Copy the provided URL to your clipboard.\nStep 4: Next, open Bash on your laptop and navigate to the directory where you wish to clone the repository using the cd command.\nStep 5: Type git clone followed by the URL, such as git clone https://github.com/github_username/repository_name.git, and press enter.\nStep 6: After the download completes, you can use cd to enter the cloned directory and ls to verify that the contents match what you saw online.\nFor more details, see Github’s docs on cloning.\nBe Careful: do not nest git repositoies. That is, there should not be one git repository inside another git repositoiry. Be careful that when you are using git clone (or git init",
    "crumbs": [
      "Home",
      "Lecture 2: Introduction to version control with Git and GitHub"
    ]
  },
  {
    "objectID": "lectures/2-git-github-ssh-basic-workflow.html#creating-a-repository-from-github-method-1-above",
    "href": "lectures/2-git-github-ssh-basic-workflow.html#creating-a-repository-from-github-method-1-above",
    "title": "Introduction to version control with Git and GitHub",
    "section": "Creating a repository from GitHub (method 1 above)",
    "text": "Creating a repository from GitHub (method 1 above)\nI recommend that you follow along with these steps on your own machine to practice the commands as you are reading about them.\nIf it is sometimes unclear where to click or what the output should look like from a command, refer to the corresponding sections of the videos to see exactly what to do (The git workflow one and the ones from lecture 2).\nYou can create however many repositories on GitHub that you would like and remove them after, so you don’t need to worry about experimenting and creating several new ones.\n\nSteps to follow:\nStep 1: Start by navigating to https://github.ubc.ca and ensure you are logged in.\nStep 2: Click the green “New repository” button. Alternatively, if you are on your profile page, select “Repositories” and then click the green “New” button.\nStep 3: Enter a name for your repository. Decide between making your repository public or private. Remember, a public repository is visible to everyone, though only you can push to it.\nStep 4: Check the box labeled “Initialize this repository with a README.” This step allows the repository to be cloned immediately without needing to add a file manually later.\nStep 5: Click the big green “Create repository” button.\nStep 6: That’s it! You now have a new repository on GitHub!",
    "crumbs": [
      "Home",
      "Lecture 2: Introduction to version control with Git and GitHub"
    ]
  },
  {
    "objectID": "lectures/2-git-github-ssh-basic-workflow.html#what-is-a-git-repository",
    "href": "lectures/2-git-github-ssh-basic-workflow.html#what-is-a-git-repository",
    "title": "Introduction to version control with Git and GitHub",
    "section": "What is a Git repository?",
    "text": "What is a Git repository?\nA Git repository stores all the necessary information for version control your project in a hidden folder called .git. If you want to know if you are working in a Git repo using the terminal you can use the bash command ls -a as you can see in the image. The -a flag will include into the lists of files displayed on the terminal the hidden folders. If .git is included you are working in a Git repository.\nBy cloning a repository from GitHub to your computer, you are automatically getting a copy of .git and thus, working on a Git.",
    "crumbs": [
      "Home",
      "Lecture 2: Introduction to version control with Git and GitHub"
    ]
  },
  {
    "objectID": "lectures/2-git-github-ssh-basic-workflow.html#adding-committing-changes-to-version-controlled-files",
    "href": "lectures/2-git-github-ssh-basic-workflow.html#adding-committing-changes-to-version-controlled-files",
    "title": "Introduction to version control with Git and GitHub",
    "section": "Adding & committing changes to version controlled files",
    "text": "Adding & committing changes to version controlled files\nThere are two ways to make changes to your files in the remote repo on GitHub:\nThe first approach involves editing files directly through GitHub’s web interface. This method is streamlined as it bypasses the need to stage files, offering a convenient option for minor edits. It’s especially suited for quick updates where the lack of staging flexibility isn’t a concern.\nAlternatively, if you prefer to work locally, you can modify files on your computer. This method involves a few more steps: first, you add the changes to the staging area, then commit them to your local repository, and finally push the updates back to GitHub.\nTo demonstrate the first method, let’s edit the README.md file in your GitHub repository. Here are the steps to follow:\n\nSteps to follow:\nStep 1: Click on the README.md file link in your repository on GitHub.\nStep 2: Click on the pen tool located on the right-hand side of the document.\nStep 3: Add your name as the author to the document (e.g., “author: Roald Dahl”).\nStep 4: Provide a commit message, such as “Add author info.”\nStep 5: Click the big green button “Commit changes” to save your work. This action combines git add and git commit into one step.\nStep 6: Download the repository to your local computer by cloning it. Use the command git clone followed by the repository’s URL.",
    "crumbs": [
      "Home",
      "Lecture 2: Introduction to version control with Git and GitHub"
    ]
  },
  {
    "objectID": "lectures/2-git-github-ssh-basic-workflow.html#changing-and-saving-version-controlled-files",
    "href": "lectures/2-git-github-ssh-basic-workflow.html#changing-and-saving-version-controlled-files",
    "title": "Introduction to version control with Git and GitHub",
    "section": "Changing and saving version controlled files",
    "text": "Changing and saving version controlled files\n\nTo make a change to a file inside a Git repository, edit it as you would with any other local file, e.g. code name-of-file.txt.\nOnce you have made changes to a file in a local Git repository (such as on your laptop), you need to tell Git that you want to record these changes in the version history.\nThis is a two step process where you first add the changes to the stanging area and then committ them, which saves the differences between the current and previous version of the file together with your message describing what you did.\n\nThese changes are saved in the hidden .git directory in the Git repository.\n\nThis is what it looks like when adding and committing:\n\nAdd changes to staging area\n\ngit add file-name(s)\n\nCommit the changes together with a descriptive message\n\ngit commit -m \"Clarify the README installation instructions\"\n\nFor more details, see Software Carpentry’s lesson on tracking local changes with Git.\n\nWhat is the staging area, and why is it there?\n\nOnce you reach a point that you want Git to keep a record of the current version of your work, you need to commit (i.e., snapshot) your changes. A prerequisite to this is telling Git which files should be included in that snapshot. We call this step adding the files to the staging area.\nNote that the staging area is not a real physical location on your computer; it is instead a conceptual placeholder for these files until they are committed. The benefit of the Git version control system using a staging area is that you can choose to commit changes in only certain files. For example, we add only the two files that are important to the analysis project (analysis.ipynb and README.md) and not our personal scratch notes for the project (notes.txt).\nThe staging area allows more control over what you are about to commit, allowing you to commit parts of a file or multiple files together with a single descriptive message. To add parts of a file instead of everything type git add -p and then interactively choose which parts you want by typing either n (no) or y (yes) followed by pressing enter for each chunk of code. This workflow is great for reviewing the changes as you add them to the staging area, which ensures you don’t commit anything by mistake. Note that you must omit-p when adding new files, so you would type git add &lt;filename&gt;.\nCommands\nTo add all updated, new, and deleted files in the git repo you can type git add --all. To only add all updated and new files in the git repo you can type git add .. To only add all updated and deleted files in the git repo you can type git add -u, this is very useful.\nTo see which files you have staged, before committing them, you can use git status. To see the exact changes you have staged instead of just the file names, use git diff --staged. Finally, if you change your mind and want to removea file from the staging area, you can type git restore --staged name-of-your-file.txt",
    "crumbs": [
      "Home",
      "Lecture 2: Introduction to version control with Git and GitHub"
    ]
  },
  {
    "objectID": "lectures/2-git-github-ssh-basic-workflow.html#commit-your-files",
    "href": "lectures/2-git-github-ssh-basic-workflow.html#commit-your-files",
    "title": "Introduction to version control with Git and GitHub",
    "section": "Commit your files",
    "text": "Commit your files\nTo include a description in your commit using the terminal, you should write the command git commit and press ENTER. After doing that, a file called COMMIT_EDITMSG will open in your editor. There you can write the title and body of the commit message that you want to associate with your changes.",
    "crumbs": [
      "Home",
      "Lecture 2: Introduction to version control with Git and GitHub"
    ]
  },
  {
    "objectID": "lectures/2-git-github-ssh-basic-workflow.html#push-local-changes-to-github",
    "href": "lectures/2-git-github-ssh-basic-workflow.html#push-local-changes-to-github",
    "title": "Introduction to version control with Git and GitHub",
    "section": "Push local changes to GitHub",
    "text": "Push local changes to GitHub\nOnce you have committed, you changes are saved locally on your laptop. To also upload them to GitHub, you need to “push” the changes to Github. Since you cloned an online repository at the beginning, git knowed that you want to push you changes to that location by default, and you can do so by typing git push without specifyin a URL.\nFor more details, see Github’s doc on pushing changes to Github.\nAlways verify that your assignments were uploaded by viewing the online repo!",
    "crumbs": [
      "Home",
      "Lecture 2: Introduction to version control with Git and GitHub"
    ]
  },
  {
    "objectID": "lectures/2-git-github-ssh-basic-workflow.html#pull-your-changes-from-a-remote-repository",
    "href": "lectures/2-git-github-ssh-basic-workflow.html#pull-your-changes-from-a-remote-repository",
    "title": "Introduction to version control with Git and GitHub",
    "section": "Pull your changes from a remote repository",
    "text": "Pull your changes from a remote repository\nChanges pushed by collaborators, or created directly on GitHub will not be automatically sent to your local repository.\nIf you are working on a project with collaborators, they will also be making changes to files (e.g., to the analysis code in a Jupyter notebook and the project’s README file), committing them to their own local repository, and pushing their commits to the remote GitHub repository to share them with you. When they push their changes, those changes will only initially exist in the remote GitHub repository and not in your local repository.\nTo obtain the new changes from the remote repository on GitHub, you will need to pull those changes to your own local repository. By pulling changes, you synchronize your local repository to what is present on GitHub. Additionally, until you pull changes from the remote repository, you will not be able to push any more changes yourself (though you will still be able to work and make commits in your own local repository)\nIf you want to do this with the terminal, you have to pull from the terminal you should use the command git pull.\n\n\nLecture 2 Exercise 2\n\n\nLet’s access your own GitHub home for MDS. There you can find the links for all the courses’ repositories, as well as, the labs’ repositories. Your home is located at:\nhttps://github.ubc.ca/MDS-2021-22/yourCWL_home\nwhere yourCWL should be replaced by your CWL.\n(Hint: you might want to bookmark this page as it gives you easy access to all relevant courses’ repositories).\n\n\n\n\nLecture 2 Exercise 2\n\n\n\nCreate a new repository at GitHub.com and choose to add a README file in this process.\nClone this repository (note that you will need to change your username on your computer if you use a different one than for GitHub.ubc.ca).\nMake changes to the README.\nAdd and commit your changes\nCreate a new file, add and commit it\nPush your previous changes to GitHub and confirm that they are there.",
    "crumbs": [
      "Home",
      "Lecture 2: Introduction to version control with Git and GitHub"
    ]
  },
  {
    "objectID": "lectures/2-git-github-ssh-basic-workflow.html#attribution",
    "href": "lectures/2-git-github-ssh-basic-workflow.html#attribution",
    "title": "Introduction to version control with Git and GitHub",
    "section": "Attribution",
    "text": "Attribution\n\nHappy Git and GitHub for the useR by Jenny Bryan and the STAT 545 TAs\nSoftware Carpentry, specifically the Unix Shell and Git lessons",
    "crumbs": [
      "Home",
      "Lecture 2: Introduction to version control with Git and GitHub"
    ]
  },
  {
    "objectID": "lectures/4-quarto_github_pages.html",
    "href": "lectures/4-quarto_github_pages.html",
    "title": "Introduction to Quarto and Github Pages",
    "section": "",
    "text": "Use the quarto terminal command to create different quarto projects\nCreate and edit a Quarto website\nDiscover how GitHub can be used to serve static websites\nModify a GitHub repository to publish a website",
    "crumbs": [
      "Home",
      "Lecture 4: Introduction to Quarto and Github Pages"
    ]
  },
  {
    "objectID": "lectures/4-quarto_github_pages.html#lecture-objectives",
    "href": "lectures/4-quarto_github_pages.html#lecture-objectives",
    "title": "Introduction to Quarto and Github Pages",
    "section": "",
    "text": "Use the quarto terminal command to create different quarto projects\nCreate and edit a Quarto website\nDiscover how GitHub can be used to serve static websites\nModify a GitHub repository to publish a website",
    "crumbs": [
      "Home",
      "Lecture 4: Introduction to Quarto and Github Pages"
    ]
  },
  {
    "objectID": "lectures/4-quarto_github_pages.html#what-is-quarto",
    "href": "lectures/4-quarto_github_pages.html#what-is-quarto",
    "title": "Introduction to Quarto and Github Pages",
    "section": "What is Quarto",
    "text": "What is Quarto\nQuarto is a tool that can be used to create scientific or technical content. It comes with a collection of tools and templates to create many differnt types of data products, e.g., websites, articles, blogs, presentations, books, etc. Quarto works out of the box with the main data science languages: Python, R, Julia, and Observable (Javascript).\nThe official Quarto website has installation instructions and various guides on getting started with creating the various data products: https://quarto.org/",
    "crumbs": [
      "Home",
      "Lecture 4: Introduction to Quarto and Github Pages"
    ]
  },
  {
    "objectID": "lectures/4-quarto_github_pages.html#installing-quarto",
    "href": "lectures/4-quarto_github_pages.html#installing-quarto",
    "title": "Introduction to Quarto and Github Pages",
    "section": "Installing Quarto",
    "text": "Installing Quarto\nQuarto should already be installed on your machine as a part of the MDS software installation stack: https://ubc-mds.github.io/resources_pages/installation_instructions/\n\nChecking your installation\nThere are a few ways you can always check if a terminal program exists and can be found on your computer.\n\nThe which command in the shell will give you the path to where the program is found. If you have multiple versions of an application installed on your machine, which will tell you which one is acually going to be used. If the path returned is not what you expect, then it typically means you need to adjust your $PATH variable. If the program cannot be found, you will get an which: no quarto in .... message. The .... will list all the locations (paths) that your $PATH variable defines. This is the order where your computer is looking for programs.\n\n$ which quarto\n/usr/bin/quarto\n\nMany terminal programs provide a --version flag that will return the version of the program installed. If the binary (i.e., program) exists, then it will return the version number back. If the program does not exist you will see a command not found message.\n\n$ quarto --version\n1.4.358\n\nYou can also access the help pages for quarto with the --help flag. This is similar to many terminal programs where you can either use the --help flag or call man (for manual) of a program. Not every program implments a --help and man. This will also differ from system to system. For quarto we can use the --help flag to also confirm that things are working\n\n$ quarto --help\n\n  Usage:   quarto\n  Version: 1.4.358\n\n  Description:\n\n    Quarto CLI\n\n  Options:\n\n    -h, --help     - Show this help.\n    -V, --version  - Show the version number for this program.\n\n  Commands:\n\n    render          [input] [args...]     - Render files or projects to various document types.\n    preview         [file] [args...]      - Render and preview a document or website project.\n    serve           [input]               - Serve a Shiny interactive document.\n    create          [type] [commands...]  - Create a Quarto project or extension\n    create-project  [dir]                 - Create a project for rendering multiple documents\n    convert         &lt;input&gt;               - Convert documents to alternate representations.\n    pandoc          [args...]             - Run the version of Pandoc embedded within Quarto.\n    typst           [args...]             - Run the version of Typst embedded within Quarto.\n    run             [script] [args...]    - Run a TypeScript, R, Python, or Lua script.\n    add             &lt;extension&gt;           - Add an extension to this folder or project\n    install         [target...]           - Installs an extension or global dependency.\n    publish         [provider] [path]     - Publish a document or project. Available providers include:\n    check           [target]              - Verify correct functioning of Quarto installation.\n    help            [command]             - Show this help or the help of a sub-command.",
    "crumbs": [
      "Home",
      "Lecture 4: Introduction to Quarto and Github Pages"
    ]
  },
  {
    "objectID": "lectures/4-quarto_github_pages.html#your-first-quarto-website",
    "href": "lectures/4-quarto_github_pages.html#your-first-quarto-website",
    "title": "Introduction to Quarto and Github Pages",
    "section": "Your first Quarto website",
    "text": "Your first Quarto website\nWe can use quarto create to aid in creating the template files for a website. These template files and code is also known as “boilerplate”.\n$ quarto create --help\n\n  Usage:   quarto create [type] [commands...]\n  Version: 1.4.358\n\n  Description:\n\n    Create a Quarto project or extension\n\n  Options:\n\n    -h, --help              - Show this help.\n    --open        [editor]  - Open new artifact in this editor (vscode,rstudio)\n    --no-open               - Do not open in an editor\n    --no-prompt             - Do not prompt to confirm actions\n    --log         &lt;level&gt;   - Path to log file\n    --log-level   &lt;level&gt;   - Log level (info, warning, error, critical)\n    --log-format  &lt;format&gt;  - Log format (plain, json-stream)\n    --quiet                 - Suppress console output.\n    --profile               - Active project profile(s)\n\n  Commands:\n\n    help  [command]  - Show this help or the help of a sub-command.\nWe are going to create a quarto project, but we may still need to know the type of project we will create. When we run quarto create project we get a terminal option to pick what kind of type.\n$ quarto create project\n ? Type\n ❯ default\n   website\n   blog\n   manuscript\n   book\n   confluence\nWe can use our arrow keys to select the project type we want, and hit enter to create the skeleton for that project. We’ll use website in this lecture.\nIt will then ask you for a directory:\n$ quarto create project\n ? Type › website\n ? Directory ›\n\nHere we can provide the relative path from your current working directory (i.e., pwd) where quarto will dump all its files.\nYou will see how it created a few files, and prompt you to open the directory in a text editor:\n  - Created _quarto.yml\n  - Created index.qmd\n  - Created about.qmd\n  - Created styles.css\n ? Open With\n ❯ vscode\n   (don't open)\nThe most important file is the _quarto.yml file, this is how quarto knows you are using a quarto project. Some quarto commands and options may need to run in a quarto project. The contents of the _qquarto.yml (in this example) file tells quarto that we are going to be creating a website.\nproject:\n  type: website\n\nTweaking your website\nThe _quarto.yml file defines many (if not all) of the options you can use to tweak how your website (or project) renders or behaves. This file is a YAML another mfile. This is a common format many tools use to provide configuration settings. Just note the indentation, white space, and dashes - are all really imporatnat and implies different things. YAML is a “recursive acronum”, it stands for “YAML Ain’t Markup Language”.\nYou can go through the official quarto website documentation guide for more information: https://quarto.org/docs/websites/\n\n\nRenering your website\nAt the end of the day, we need a series of .html files that our web browser can open and render. So far we don’t have any of that. Luckily quarto can take the source documents and create the .html files needed for a website.\nThere are 2 commands that will be helpful for us here:\n\nquarto preview: will “preview” the website, any changes to the files will automatically regnerate and refresh the website files\nquarto render: will generate all the html files\n\nThis of preview as a way to quickly see how the website changes as you are working, and render as creating the “final” website from scratch. When using quarto preview your current terminal will be used to look for changes and re-render your site.\n$ quarto preview\nPreparing to preview\n\nWatching files for changes\nBrowse at http://localhost:4463/\nOpening in existing browser session.\nGET: /\nHere you can see we can navigate to http://localhost:4463/ in our browser and see our website locally. The URL essentially says to look at port 4463 on our local machine (i.e., localhost). Your port number may differ and change, so always pay attention to what port your current site is running on. If something is not updating after you make a change, try exiting out of preview with CTRL + c and re-preview-ing.\nWhen we use quarto render it will create the website html files and give our terminal back. We will have to manually navigate to the index.html file to see the website changes as we go.\n$ quarto render\n[1/2] about.qmd\n[2/2] index.qmd\n\nOutput created: _site/index.html\nAlways render your site before your final deployment, not all changes to your quarto files will trigger an automatic regeneration + rendering.",
    "crumbs": [
      "Home",
      "Lecture 4: Introduction to Quarto and Github Pages"
    ]
  },
  {
    "objectID": "lectures/4-quarto_github_pages.html#github-pages",
    "href": "lectures/4-quarto_github_pages.html#github-pages",
    "title": "Introduction to Quarto and Github Pages",
    "section": "GitHub Pages",
    "text": "GitHub Pages\nGitHub (public and enterprise) have mechanims that can turn static website content and render them into an actual website. If you’re reading these words from a web URL and not directly in the raw source (i.e., the jupyter notebook) then you are experiencing github pages.\nGithub uses Jekyll by default to render its github pages. However you can manually render your own html files and disable Github’s jekyll rendering and tell Github pages to render your website content exactly as you have it.\n\nGithub Pages and repositories\nAny one of your github repositories can be set up to use github pages. If a repository is github pages enabled to render a website, it is typically published to: USERNAME.github.io/REPO_NAME. where USERNAME is your github username, and REPO_NAME is the actual name of the repository on github.\n\nSpecial github repository names\nThere are 2 other special repository names that github provides that you can use to create a landing page for yourself (i.e., creating your professional presence and profile):\n\nUSERNAME.github.io\nUSERNAME\n\n\nUSERNAME.github.io\nCreating a repository with this name (replacing the text USERNAME with your github username) and having static website files on it will allow you to direct people to your own github website: https://USERNAME.github.io/.\nIf you know your way around HTML + CSS and related tools, you can publish any static content on your own and render it on the site. In this lesson we’re leveraging quarto to help us create the html files.\nHere’s an example of a repository that contains only a index.html file that redirects to a different URL:\nhttps://github.com/chendaniely/chendaniely.github.io\nWhen someone goes to chendaniely.github.io they will be automatically redirected to a different web address.\n\n\nUSERNAME\nIf you create a repository that is just your github username, with only a README.md file in it. Github will render the README.md file into your github landing page.\nHere is an example of a former MDS student’s Github landing page:\nhttps://github.com/mrnabiz/\nand their accompanying repository:\nhttps://github.com/mrnabiz/mrnabiz\n\n\n\n\nGithub Pages &lt;&gt; Quarto\nNow that we’ve seen how to use quarto to create a website locally, we can leverage it in publishing the website.\nWe’ve talked in the past how we should ignore generated files in a git repository, but this is an exception where we actually need to keep the rendered html files from quarto. Otherwise github pages will not have anything to render.\nWe can use any of the git methods we’ve learned to get our quarto files into a github repository.\n\ngit init + create the remote repo + connect the remote URLs\ncreate the remote repo + git clone\n\nOnce all our files are on github, we can tell github to render the website files.\n\nGo to the repository settings (not your account settions)\nGoto the “Pages” options\n\nWe have a few options to tell github how to render a webssite. Currently, our files are in the main branch, but the only options for deploying from main is under / root or /docs. This is a problem because our quarto website defaults to putting all the website files into _site/\nWe can change the directory quarto renders the files into by editing our _quarto.yml file. Let’s have it render the website files into a folder github understands.\nproject:\n  type: website\n  output-dir: docs\nWhen you re-render your site now, the output should reflect your new output directory:\n$ quarto render\n[1/2] about.qmd\n[2/2] index.qmd\n\nOutput created: docs/index.html\nDont forget to save your yaaml file, re-render, remove the old _site folder, add, commit, and push your changes.\nOn your main github repo, you’ll notice a burnt orange dot next to the latest commit hash. This is github’s continuous integration / deployment system creating and publishing your site. When the icon is green, you can navibate to your site and behold publishing somethign on the internet!",
    "crumbs": [
      "Home",
      "Lecture 4: Introduction to Quarto and Github Pages"
    ]
  },
  {
    "objectID": "lectures/4-quarto_github_pages.html#quarto-for-rendering-your-mds-assignments",
    "href": "lectures/4-quarto_github_pages.html#quarto-for-rendering-your-mds-assignments",
    "title": "Introduction to Quarto and Github Pages",
    "section": "Quarto for rendering your MDS assignments",
    "text": "Quarto for rendering your MDS assignments\nYou can use quarto render to render your MDS documents into different output formats, e.g., pdf or html. For more information you can explore how quarto render works by calling the help page for render. This can be particularly useful when trying to export out pdf documents from a jupyter notebook if other methods are not working.\n$ quarto help render\n\n  Usage:   quarto render [input] [args...]\n  Version: 1.4.358\n\n  Description:\n\n    Render files or projects to various document types.\n\n  Options:\n\n    -h, --help                          - Show this help.\n    -t, --to                            - Specify output format(s).\n    -o, --output                        - Write output to FILE (use '--output -' for stdout).\n    --output-dir                        - Write project output to DIR (path is project relative)\n    -M, --metadata                      - Metadata value (KEY:VALUE).\n    --site-url                          - Override site-url for website or book output\n    --execute                           - Execute code (--no-execute to skip execution).\n    -P, --execute-param                 - Execution parameter (KEY:VALUE).\n    --execute-params                    - YAML file with execution parameters.\n    --execute-dir                       - Working directory for code execution.\n    --execute-daemon                    - Keep Jupyter kernel alive (defaults to 300 seconds).\n    --execute-daemon-restart            - Restart keepalive Jupyter kernel before render.\n    --execute-debug                     - Show debug output for Jupyter kernel.\n    --use-freezer                       - Force use of frozen computations for an incremental file render.\n    --cache                             - Cache execution output (--no-cache to prevent cache).\n    --cache-refresh                     - Force refresh of execution cache.\n    --no-clean                          - Do not clean project output-dir prior to render\n    --debug                             - Leave intermediate files in place after render.\n    pandoc-args...                      - Additional pandoc command line arguments.\n    --log                     &lt;level&gt;   - Path to log file\n    --log-level               &lt;level&gt;   - Log level (info, warning, error, critical)\n    --log-format              &lt;format&gt;  - Log format (plain, json-stream)\n    --quiet                             - Suppress console output.\n    --profile                           - Active project profile(s)\n\n  Commands:\n\n    help  [command]  - Show this help or the help of a sub-command.\n\n  Examples:\n\n    Render Markdown:    quarto render document.qmd\n                        quarto render document.qmd --to html\n                        quarto render document.qmd --to pdf --toc\n    Render Notebook:    quarto render notebook.ipynb\n                        quarto render notebook.ipynb --to docx\n                        quarto render notebook.ipynb --to pdf --toc\n    Render Project:     quarto render\n                        quarto render projdir\n    Render w/ Metadata: quarto render document.qmd -M echo:false\n                        quarto render document.qmd -M code-fold:true\n    Render to Stdout:   quarto render document.qmd --output -\nYou can also use quarto render --help to get the same help output.",
    "crumbs": [
      "Home",
      "Lecture 4: Introduction to Quarto and Github Pages"
    ]
  },
  {
    "objectID": "lectures/4-quarto_github_pages.html#improving-your-quarto-experience",
    "href": "lectures/4-quarto_github_pages.html#improving-your-quarto-experience",
    "title": "Introduction to Quarto and Github Pages",
    "section": "Improving your quarto experience",
    "text": "Improving your quarto experience\nQuarto works with a few IDEs and text editors.\n\nVSCode extension: https://marketplace.visualstudio.com/items?itemName=quarto.quarto\nRStudio: Comes with RStudio (you can also manually install it as a terminal application)\nJupyter Lab: there is no official jupyter quarto extension, but quarto can work with jupyter notebooks in the command line tool",
    "crumbs": [
      "Home",
      "Lecture 4: Introduction to Quarto and Github Pages"
    ]
  },
  {
    "objectID": "lectures/6-rmarkdown-quarto-slides-ghpages.html",
    "href": "lectures/6-rmarkdown-quarto-slides-ghpages.html",
    "title": "Quarto, RMarkdown, and Jupyter Slides",
    "section": "",
    "text": "Understand how Quarto extend RMarkdown documents functionalities.\nExplore different data science products to communicate your results: slides, blogs and books.\nCreate slides using Jupyter Notebook and Quarto slides with reveal.js\nCreate a Jupyter Book and a Quarto books.\nCreate a Quarto Blog.\nSharing rendered HTML files publicly via GitHub Pages.\n\nPlatform in focus RStudio IDE + Quarto",
    "crumbs": [
      "Home",
      "Lecture 6: Quarto, RMarkdown, and Jupyter Slides"
    ]
  },
  {
    "objectID": "lectures/6-rmarkdown-quarto-slides-ghpages.html#lecture-objectives",
    "href": "lectures/6-rmarkdown-quarto-slides-ghpages.html#lecture-objectives",
    "title": "Quarto, RMarkdown, and Jupyter Slides",
    "section": "",
    "text": "Understand how Quarto extend RMarkdown documents functionalities.\nExplore different data science products to communicate your results: slides, blogs and books.\nCreate slides using Jupyter Notebook and Quarto slides with reveal.js\nCreate a Jupyter Book and a Quarto books.\nCreate a Quarto Blog.\nSharing rendered HTML files publicly via GitHub Pages.\n\nPlatform in focus RStudio IDE + Quarto",
    "crumbs": [
      "Home",
      "Lecture 6: Quarto, RMarkdown, and Jupyter Slides"
    ]
  },
  {
    "objectID": "lectures/6-rmarkdown-quarto-slides-ghpages.html#lecture-6-activity-1",
    "href": "lectures/6-rmarkdown-quarto-slides-ghpages.html#lecture-6-activity-1",
    "title": "Quarto, RMarkdown, and Jupyter Slides",
    "section": "Lecture 6 Activity 1",
    "text": "Lecture 6 Activity 1",
    "crumbs": [
      "Home",
      "Lecture 6: Quarto, RMarkdown, and Jupyter Slides"
    ]
  },
  {
    "objectID": "lectures/6-rmarkdown-quarto-slides-ghpages.html#quarto-documents-markdown-flavour",
    "href": "lectures/6-rmarkdown-quarto-slides-ghpages.html#quarto-documents-markdown-flavour",
    "title": "Quarto, RMarkdown, and Jupyter Slides",
    "section": "Quarto documents markdown flavour",
    "text": "Quarto documents markdown flavour\nIn lecture 7 we have been learning about RMarkdown. Recently, has been released Quarto. Adding capabilities to R Markdown it also uses Pandoc Markdown, but we will talk about it later: https://quarto.org/docs/authoring/markdown-basics.html\nIn brief we are going to learn that you can create a gfm formatted document in Quarto. This means that you can use this type of file to create a README.md that will perfectly render on GitHub.\n\nJupyter Notebooks for Python and RMarkdown for R?\nEven if the purpose of using a Jupyter Notebook and an RMarkdown is similar there are major differences to be considered. The first one is that Jupyter Notebooks has been created for Python (even if there exist an R ikernel) and that RMarkdown has been created for R (even if can be used with Python through the reticulate package). There is a third new option, Quarto documents (.qmd), that can be open in RStudio, VS Code and JupyterLab at the same time and be used with Python, R or Julia.\nA single .qmd file is processed by a single engine running R, Python, or Julia. The trick is that an .qmd file running R can run Python via the reticulate R package meanwhile a .qmd running Python can run R via the rpy2 Python package. We will learn more about Quarto soon, but first let’s think a bit about how we write text in the notebooks.\nThis being said you have to consider that: &gt; Note that if you are using either the Jupyter or Knitr computational engine you will likely be better off using JupyterLab or VS Code (for .ipynb notebooks) or RStudio (for .qmd documents) as these environments provide code-completion, incremental cell execution, and other useful tools for working with executable code.\n\nQuarto Docs - Text editors (https://quarto.org/docs/tools/text-editors.html)\n\n Quarto documents are created with text and Python, R and/or Julia code",
    "crumbs": [
      "Home",
      "Lecture 6: Quarto, RMarkdown, and Jupyter Slides"
    ]
  },
  {
    "objectID": "lectures/6-rmarkdown-quarto-slides-ghpages.html#lecture-6-activity-2",
    "href": "lectures/6-rmarkdown-quarto-slides-ghpages.html#lecture-6-activity-2",
    "title": "Quarto, RMarkdown, and Jupyter Slides",
    "section": "Lecture 6 Activity 2",
    "text": "Lecture 6 Activity 2",
    "crumbs": [
      "Home",
      "Lecture 6: Quarto, RMarkdown, and Jupyter Slides"
    ]
  },
  {
    "objectID": "lectures/6-rmarkdown-quarto-slides-ghpages.html#presentations-with-jupyterlab-rmarkdown-and-quarto",
    "href": "lectures/6-rmarkdown-quarto-slides-ghpages.html#presentations-with-jupyterlab-rmarkdown-and-quarto",
    "title": "Quarto, RMarkdown, and Jupyter Slides",
    "section": "Presentations with JupyterLab, RMarkdown and Quarto",
    "text": "Presentations with JupyterLab, RMarkdown and Quarto\nYou can create a great set of slides to share your results with others! We are going to use the framework reveal.js. RMarkdown most popular slides are created with a package called xaringan. Since Quarto appear, it is possible to create slides using reveal.js that is the same framework that is available by default in Jupyter Notebooks. Anyway, it would be possible to generate reveal.js presentations with RMarkdown if you install the revealjs package and follow these instructions.\n\nCreate your slides using Quarto\nIf you are using Jupyter Notebooks it is quite straightforward to create your slides. You can use Jupyter Lab interface too with the same purpose. You can read more about it here\n\n\n\nJupyter Slides\n\n\nYou can crea\nClicking here you can have an example of what you can do with Quarto presentations using reveal.js framework.\nLecture x\nTake 5 minutes of the class and convert one of your .Rmd, .qmd or .ipynb to a set of slides.\nYou can convert the slides manually or look into the jupytext or quarto convert tools to do an initial file conversion.",
    "crumbs": [
      "Home",
      "Lecture 6: Quarto, RMarkdown, and Jupyter Slides"
    ]
  },
  {
    "objectID": "lectures/8-regex-filenames-project-organization.html",
    "href": "lectures/8-regex-filenames-project-organization.html",
    "title": "Organization of Data Science projects and some useful tools",
    "section": "",
    "text": "Understand what is a computational environment and how can ensure the reproducibility of a project\nDifferenciate Python, Anaconda, MiniConda, Conda and pip\nManage packages and environments in Python using Conda\nManage packages and environments in R using renv",
    "crumbs": [
      "Home",
      "Lecture 8: Organization of Data Science projects and some useful tools"
    ]
  },
  {
    "objectID": "lectures/8-regex-filenames-project-organization.html#lecture-objectives",
    "href": "lectures/8-regex-filenames-project-organization.html#lecture-objectives",
    "title": "Organization of Data Science projects and some useful tools",
    "section": "",
    "text": "Understand what is a computational environment and how can ensure the reproducibility of a project\nDifferenciate Python, Anaconda, MiniConda, Conda and pip\nManage packages and environments in Python using Conda\nManage packages and environments in R using renv",
    "crumbs": [
      "Home",
      "Lecture 8: Organization of Data Science projects and some useful tools"
    ]
  },
  {
    "objectID": "lectures/8-regex-filenames-project-organization.html#lecture-8-activity-1",
    "href": "lectures/8-regex-filenames-project-organization.html#lecture-8-activity-1",
    "title": "Organization of Data Science projects and some useful tools",
    "section": "Lecture 8 Activity 1",
    "text": "Lecture 8 Activity 1",
    "crumbs": [
      "Home",
      "Lecture 8: Organization of Data Science projects and some useful tools"
    ]
  },
  {
    "objectID": "lectures/8-regex-filenames-project-organization.html#lecture-8-activity-2",
    "href": "lectures/8-regex-filenames-project-organization.html#lecture-8-activity-2",
    "title": "Organization of Data Science projects and some useful tools",
    "section": "Lecture 8 Activity 2",
    "text": "Lecture 8 Activity 2",
    "crumbs": [
      "Home",
      "Lecture 8: Organization of Data Science projects and some useful tools"
    ]
  },
  {
    "objectID": "lectures/8-regex-filenames-project-organization.html#names-matter",
    "href": "lectures/8-regex-filenames-project-organization.html#names-matter",
    "title": "Organization of Data Science projects and some useful tools",
    "section": "Names matter",
    "text": "Names matter\n\n\n\ncheers",
    "crumbs": [
      "Home",
      "Lecture 8: Organization of Data Science projects and some useful tools"
    ]
  },
  {
    "objectID": "lectures/8-regex-filenames-project-organization.html#what-works-what-doesnt",
    "href": "lectures/8-regex-filenames-project-organization.html#what-works-what-doesnt",
    "title": "Organization of Data Science projects and some useful tools",
    "section": "What works, what doesn’t?",
    "text": "What works, what doesn’t?\nNO\nmyabstract.docx\nJoe’s Filenames Use Spaces and Punctuation.xlsx\nfigure 1.png\nfig 2.png\nJW7d^(2sl@deletethisandyourcareerisoverWx2*.txt\nYES\n2014-06-08_abstract-for-sla.docx\njoes-filenames-are-getting-better.xlsx\nfig01_talk-scatterplot-length-vs-interest.png\nfig02_talk-histogram-attendance.png\n1986-01-28_raw-data-from-challenger-o-rings.txt",
    "crumbs": [
      "Home",
      "Lecture 8: Organization of Data Science projects and some useful tools"
    ]
  },
  {
    "objectID": "lectures/8-regex-filenames-project-organization.html#three-principles-for-file-names",
    "href": "lectures/8-regex-filenames-project-organization.html#three-principles-for-file-names",
    "title": "Organization of Data Science projects and some useful tools",
    "section": "Three principles for (file) names",
    "text": "Three principles for (file) names\n\nMachine readable\nHuman readable\nPlays well with default ordering",
    "crumbs": [
      "Home",
      "Lecture 8: Organization of Data Science projects and some useful tools"
    ]
  },
  {
    "objectID": "lectures/8-regex-filenames-project-organization.html#awesome-file-names",
    "href": "lectures/8-regex-filenames-project-organization.html#awesome-file-names",
    "title": "Organization of Data Science projects and some useful tools",
    "section": "Awesome file names :)",
    "text": "Awesome file names :)\n\n\n\nawesome_names",
    "crumbs": [
      "Home",
      "Lecture 8: Organization of Data Science projects and some useful tools"
    ]
  },
  {
    "objectID": "lectures/8-regex-filenames-project-organization.html#machine-readable-1",
    "href": "lectures/8-regex-filenames-project-organization.html#machine-readable-1",
    "title": "Organization of Data Science projects and some useful tools",
    "section": "Machine readable",
    "text": "Machine readable\n\nRegular expression and globbing friendly\n\nAvoid spaces, punctuation, accented characters, case sensitivity\n\nEasy to compute on\n\nDeliberate use of delimiters",
    "crumbs": [
      "Home",
      "Lecture 8: Organization of Data Science projects and some useful tools"
    ]
  },
  {
    "objectID": "lectures/8-regex-filenames-project-organization.html#globbing",
    "href": "lectures/8-regex-filenames-project-organization.html#globbing",
    "title": "Organization of Data Science projects and some useful tools",
    "section": "Globbing",
    "text": "Globbing\nExcerpt of complete file listing:\n\n\n\nplasmid_names\n\n\n\nExample of globbing to narrow file listing:\n\n\n\nplasmid_names",
    "crumbs": [
      "Home",
      "Lecture 8: Organization of Data Science projects and some useful tools"
    ]
  },
  {
    "objectID": "lectures/8-regex-filenames-project-organization.html#same-using-mac-os-finder-search-facilities",
    "href": "lectures/8-regex-filenames-project-organization.html#same-using-mac-os-finder-search-facilities",
    "title": "Organization of Data Science projects and some useful tools",
    "section": "Same using Mac OS Finder search facilities",
    "text": "Same using Mac OS Finder search facilities\n\n\n\n\nplasmid_mac_os_search",
    "crumbs": [
      "Home",
      "Lecture 8: Organization of Data Science projects and some useful tools"
    ]
  },
  {
    "objectID": "lectures/8-regex-filenames-project-organization.html#same-using-regex-in-r",
    "href": "lectures/8-regex-filenames-project-organization.html#same-using-regex-in-r",
    "title": "Organization of Data Science projects and some useful tools",
    "section": "Same using regex in R",
    "text": "Same using regex in R\n\n\n\n\nplasmid_regex",
    "crumbs": [
      "Home",
      "Lecture 8: Organization of Data Science projects and some useful tools"
    ]
  },
  {
    "objectID": "lectures/8-regex-filenames-project-organization.html#punctuation",
    "href": "lectures/8-regex-filenames-project-organization.html#punctuation",
    "title": "Organization of Data Science projects and some useful tools",
    "section": "Punctuation",
    "text": "Punctuation\nDeliberate use of \"-\" and \"_\" allows recovery of meta-data from the filenames:\n\n\"_\" underscore used to delimit units of meta-data I want later\n\"-\" hyphen used to delimit words so my eyes don’t bleed\n\n\n\n\n\nplasmid_delimiters\n\n\n\n\n\n\n\n\nplasmid_delimiters_code\n\n\n\nThis happens to be R but also possible in the shell, Python, etc.",
    "crumbs": [
      "Home",
      "Lecture 8: Organization of Data Science projects and some useful tools"
    ]
  },
  {
    "objectID": "lectures/8-regex-filenames-project-organization.html#recap-machine-readable",
    "href": "lectures/8-regex-filenames-project-organization.html#recap-machine-readable",
    "title": "Organization of Data Science projects and some useful tools",
    "section": "Recap: machine readable",
    "text": "Recap: machine readable\n\nEasy to search for files later\nEasy to narrow file lists based on names\nEasy to extract info from file names, e.g. by splitting\nNew to regular expressions and globbing? be kind to yourself and avoid\n\nSpaces in file names\nPunctuation\nAccented characters\nDifferent files named foo and Foo",
    "crumbs": [
      "Home",
      "Lecture 8: Organization of Data Science projects and some useful tools"
    ]
  },
  {
    "objectID": "lectures/8-regex-filenames-project-organization.html#human-readable-1",
    "href": "lectures/8-regex-filenames-project-organization.html#human-readable-1",
    "title": "Organization of Data Science projects and some useful tools",
    "section": "Human readable",
    "text": "Human readable\n\nName contains info on content\nConnects to concept of a slug from semantic URLs",
    "crumbs": [
      "Home",
      "Lecture 8: Organization of Data Science projects and some useful tools"
    ]
  },
  {
    "objectID": "lectures/8-regex-filenames-project-organization.html#example",
    "href": "lectures/8-regex-filenames-project-organization.html#example",
    "title": "Organization of Data Science projects and some useful tools",
    "section": "Example",
    "text": "Example\nWhich set of file(name)s do you want at 3 a.m. before a deadline?\n\n\n\nhuman_readable_not_options",
    "crumbs": [
      "Home",
      "Lecture 8: Organization of Data Science projects and some useful tools"
    ]
  },
  {
    "objectID": "lectures/8-regex-filenames-project-organization.html#embrace-the-slug",
    "href": "lectures/8-regex-filenames-project-organization.html#embrace-the-slug",
    "title": "Organization of Data Science projects and some useful tools",
    "section": "Embrace the slug",
    "text": "Embrace the slug\n\nslug filenames \nslug",
    "crumbs": [
      "Home",
      "Lecture 8: Organization of Data Science projects and some useful tools"
    ]
  },
  {
    "objectID": "lectures/8-regex-filenames-project-organization.html#recap-human-readable",
    "href": "lectures/8-regex-filenames-project-organization.html#recap-human-readable",
    "title": "Organization of Data Science projects and some useful tools",
    "section": "Recap: Human readable",
    "text": "Recap: Human readable\nEasy to figure out what the heck something is, based on its name",
    "crumbs": [
      "Home",
      "Lecture 8: Organization of Data Science projects and some useful tools"
    ]
  },
  {
    "objectID": "lectures/8-regex-filenames-project-organization.html#plays-well-with-default-ordering-1",
    "href": "lectures/8-regex-filenames-project-organization.html#plays-well-with-default-ordering-1",
    "title": "Organization of Data Science projects and some useful tools",
    "section": "Plays well with default ordering",
    "text": "Plays well with default ordering\n\nPut something numeric first\nUse the ISO 8601 standard for dates\nLeft pad other numbers with zeros",
    "crumbs": [
      "Home",
      "Lecture 8: Organization of Data Science projects and some useful tools"
    ]
  },
  {
    "objectID": "lectures/8-regex-filenames-project-organization.html#examples",
    "href": "lectures/8-regex-filenames-project-organization.html#examples",
    "title": "Organization of Data Science projects and some useful tools",
    "section": "Examples",
    "text": "Examples\nChronological order:\n\n\n\nchronological_order\n\n\n\nLogical order: Put something numeric first\n\n\n\nlogical_order",
    "crumbs": [
      "Home",
      "Lecture 8: Organization of Data Science projects and some useful tools"
    ]
  },
  {
    "objectID": "lectures/8-regex-filenames-project-organization.html#dates",
    "href": "lectures/8-regex-filenames-project-organization.html#dates",
    "title": "Organization of Data Science projects and some useful tools",
    "section": "Dates",
    "text": "Dates\nUse the ISO 8601 standard for dates: YYYY-MM-DD\n\n\n\nchronological_order",
    "crumbs": [
      "Home",
      "Lecture 8: Organization of Data Science projects and some useful tools"
    ]
  },
  {
    "objectID": "lectures/8-regex-filenames-project-organization.html#section",
    "href": "lectures/8-regex-filenames-project-organization.html#section",
    "title": "Organization of Data Science projects and some useful tools",
    "section": "",
    "text": "iso_psa",
    "crumbs": [
      "Home",
      "Lecture 8: Organization of Data Science projects and some useful tools"
    ]
  },
  {
    "objectID": "lectures/8-regex-filenames-project-organization.html#comprehensive-map-of-all-countries-in-the-world-that-use-the-mm-dd-yyyy-format",
    "href": "lectures/8-regex-filenames-project-organization.html#comprehensive-map-of-all-countries-in-the-world-that-use-the-mm-dd-yyyy-format",
    "title": "Organization of Data Science projects and some useful tools",
    "section": "Comprehensive map of all countries in the world that use the MM-DD-YYYY format",
    "text": "Comprehensive map of all countries in the world that use the MM-DD-YYYY format\n\n\n\n\nmap_mmddyyy\n\n\n\n\nFrom https://twitter.com/donohoe/status/597876118688026624.",
    "crumbs": [
      "Home",
      "Lecture 8: Organization of Data Science projects and some useful tools"
    ]
  },
  {
    "objectID": "lectures/8-regex-filenames-project-organization.html#left-pad-other-numbers-with-zeros",
    "href": "lectures/8-regex-filenames-project-organization.html#left-pad-other-numbers-with-zeros",
    "title": "Organization of Data Science projects and some useful tools",
    "section": "Left pad other numbers with zeros",
    "text": "Left pad other numbers with zeros\n\n\n\n\nlogical_order\n\n\n\n\nIf you don’t left pad, you get this:\n10_final-figs-for-publication.R\n1_data-cleaning.R\n2_fit-model.R\nwhich is just sad :(",
    "crumbs": [
      "Home",
      "Lecture 8: Organization of Data Science projects and some useful tools"
    ]
  },
  {
    "objectID": "lectures/8-regex-filenames-project-organization.html#recap-plays-well-with-default-ordering",
    "href": "lectures/8-regex-filenames-project-organization.html#recap-plays-well-with-default-ordering",
    "title": "Organization of Data Science projects and some useful tools",
    "section": "Recap: Plays well with default ordering",
    "text": "Recap: Plays well with default ordering\n\nPut something numeric first\nUse the ISO 8601 standard for dates\nLeft pad other numbers with zeros",
    "crumbs": [
      "Home",
      "Lecture 8: Organization of Data Science projects and some useful tools"
    ]
  },
  {
    "objectID": "lectures/8-regex-filenames-project-organization.html#recap",
    "href": "lectures/8-regex-filenames-project-organization.html#recap",
    "title": "Organization of Data Science projects and some useful tools",
    "section": "Recap",
    "text": "Recap",
    "crumbs": [
      "Home",
      "Lecture 8: Organization of Data Science projects and some useful tools"
    ]
  },
  {
    "objectID": "lectures/8-regex-filenames-project-organization.html#three-principles-for-file-names-1",
    "href": "lectures/8-regex-filenames-project-organization.html#three-principles-for-file-names-1",
    "title": "Organization of Data Science projects and some useful tools",
    "section": "Three principles for (file) names",
    "text": "Three principles for (file) names\n\nMachine readable\nHuman readable\nPlays well with default ordering",
    "crumbs": [
      "Home",
      "Lecture 8: Organization of Data Science projects and some useful tools"
    ]
  },
  {
    "objectID": "lectures/8-regex-filenames-project-organization.html#pros",
    "href": "lectures/8-regex-filenames-project-organization.html#pros",
    "title": "Organization of Data Science projects and some useful tools",
    "section": "Pros",
    "text": "Pros\n\nEasy to implement NOW\nPayoffs accumulate as your skills evolve and projects get more complex",
    "crumbs": [
      "Home",
      "Lecture 8: Organization of Data Science projects and some useful tools"
    ]
  },
  {
    "objectID": "lectures/8-regex-filenames-project-organization.html#go-forth-and-use-awesome-file-names",
    "href": "lectures/8-regex-filenames-project-organization.html#go-forth-and-use-awesome-file-names",
    "title": "Organization of Data Science projects and some useful tools",
    "section": "Go forth and use awesome file names :)",
    "text": "Go forth and use awesome file names :)\n\n\n\nchronological_order\n\n\n\n\n\n\nlogical_order\n\n\n\nLecture Activities\n\nWhich of the following items describe three important rules for naming files on a computer? Select all correct answers.\n\nA. File name parts should be easy to extract programmatically B. Humans would understand something about file contents by looking at their names C. Files with appropriate names would be nicely organized by default D. File names should always use lower-case letters E. Underscores are the only allowed separator in file names F. Human understanding of file names should be prioritized over machine understanding\n\nMatch each explanation with its corresponding file naming principle:\n\n\nBy following this principle, we are able to use tools such as regular expressions and file-name globbing to search, select and manipulate files using tools such as the unix shell, R and Python.\n\nH. By following this principle, we can have a good idea of what is inside files without having to open them (saves us time) and when we come back to work on a project we haven’t worked on in a while it is much easier for us to remember what we were working on and get started again.\nI. By following this principle, we can make our files more organized and understandable, and files more findable. Ordered lists will be sorted into a logical order and so it is easy to orient yourself in the directory and find the files you want to find.\nJ. By following this principle, we will be sure that our files have the appropriate formatting in terms of their content. Such files will be ready for subsequent analysis in a data science pipeline.\n\nWhich of the following are GOOD date formats to use in a filename?\n\nK. 2020-01-26T0233 L. 20200126T0233 M. 2020-01-26",
    "crumbs": [
      "Home",
      "Lecture 8: Organization of Data Science projects and some useful tools"
    ]
  },
  {
    "objectID": "lectures/8-regex-filenames-project-organization.html#why-even-bother",
    "href": "lectures/8-regex-filenames-project-organization.html#why-even-bother",
    "title": "Organization of Data Science projects and some useful tools",
    "section": "Why even bother?",
    "text": "Why even bother?\nAsking questions effectively means that the person helping you will be able to answer your question better and quicker. Being able to answer a question quicker means more time to help others, including your future self. When questions require clarification, fewer people will be helped overall. Sometimes this in unavoidable because the question is complex, but all too often it if because the person trying to help is not able to reproduce problem, or the question is unclear.\nWhen you are asking for help online, e.g. on StackOverflow or on GitHub, remember that you are often receiving help from people who are volunteering their time. So please make it as easy as possible for them to help you.\nYou might be frustrated by a problem to the point where you just want to ask something like.\n\nWHY IS THIS **** CODE NOT WORKING??????\n\nDon’t do this. No one will help you. You will get more frustrated.\nWhen I feel like this, I find it really helpful and calming to sit down and type out a proper question. You can start banging out words in the beginning, but as you slowly adhere to the format of asking properly, it will become like a meditative practice which also calms you down.\nIn addition to your mental wellbeing, writing down questions properly has another superb quality: they help you solve your own problems. The act of formulating a question in either speech or text helps you uncover what you missed while the problem was a mere thought. This is so common that it has a name: “Rubber duck debugging” allegedly from a software developer who put a rubber duck on their desk and whenever they had a problem they couldn’t solve, they starting talking to the toy duck, and often came upon the resolution during while describing the problem.",
    "crumbs": [
      "Home",
      "Lecture 8: Organization of Data Science projects and some useful tools"
    ]
  },
  {
    "objectID": "lectures/8-regex-filenames-project-organization.html#how-to-ask-effectively",
    "href": "lectures/8-regex-filenames-project-organization.html#how-to-ask-effectively",
    "title": "Organization of Data Science projects and some useful tools",
    "section": "How to ask effectively",
    "text": "How to ask effectively\nIn essence, you want to make your question as easy to understand as possible and your specific problem as easy to reproduce as possible. If you just include a screenshot and title your question “Help”, the person helping you has to spend time trying to figure out what you actually want help with instead of helping, Instead include a succinct, clear description of your problem and the minimal code needed to reproduce it. If you are asking your question on stack overflow you can use tags to categorize it, and these can then be used to search for an answer via the syntax [tag-name]. This can be especially useful for R, since the name is just one letter and it can be hard to find relevant matches otherwise.\n\nMinimal reproducible example\nThere is a Swedish expression: “beloved child has many names”. No, it does not translate very well to English, but the message is that someone or something that many people like, will be referred to differently by different people. This is true for minimal reproducible examples, which you might find referred to by any of the following:\n\nMRE Minimal Reproducible Example\nMCVE Minimal Complete Verifiable Example\nMWE Minimal Working Example\nreprex REPRoducible EXample\n\nThere have been great articles written on what goes into an MRE, and here are some of them that I recommend that you check out:\n\nhttps://stackoverflow.com/help/how-to-ask\nhttps://stackoverflow.com/help/minimal-reproducible-example\nhttps://community.rstudio.com/t/faq-whats-a-reproducible-example-reprex-and-how-do-i-do-one/5219\nhttps://reprex.tidyverse.org/ (an R package to help creating MREs from code)\n\nIn summary, asking effectively and creating an MRE includes the following tasks:\n\nSearch for other questions similar to yours.\nDescribe the issue clearly in the title and elaborate briefly in the text body.\nReduce the code to the minimum required to recreate your error, and paste it as text.\n\nIf your code includes functions or classes, include their definitions.\nCreate small toy dataset instead of using real data.\nUse markdown code blocks for proper indentation and syntax highlighting.\n\nDescribe what you have tried so far, what you don’t understand or what went wrong, including any error messages and their full traceback.\n\nThe points are elaborated on below:\n\nSearch for other questions similar to yours. Many questions already have an answer, and finding it is faster both for you and for others. If the answer to an existing question is not good enough, improve it by adding the missing info!\nWrite the tile as a summary of your issue. Think about what you would want the title to say if you were searching the issue list for help. Just “Error” or “Question” is not helpful, but “How to list content in a folder?” is.\nIntroduce the problem by briefly describing what you want to do.\nShow what you have tried, explain what you expected to happen, and what went wrong. It is often critical that the person helping you can reproduce the problem, so include both the code or command you tried to run and the error message.\n\nFor coding questions, text is preferred over a screenshot since it is easy to copy and paste, which facilitates reproducing your problem.\nInline code should be surrounded by single backticks for clarity. Longer blocks of code with multiple lines should be surrounded by triple backticks.\n\nInclude versions of any packages you are using, and the operating system if relevant, e.g. Win10, Python 3.8, pandas 1.0.2. On R you can use devtools::session_info() to see this information (after install.packages(\"devtools\")). and on Python you can use sinfo() (after importing: from sinfo import sinfo, needs to be installed via pip install sinfo).\nWhen your problem is solved, acknowledge the solution, close the issue/ticket/question. If you found the solution yourself, post it in a comment before closing, so that others can find it.",
    "crumbs": [
      "Home",
      "Lecture 8: Organization of Data Science projects and some useful tools"
    ]
  },
  {
    "objectID": "lectures/8-regex-filenames-project-organization.html#lecture-8-activity-3",
    "href": "lectures/8-regex-filenames-project-organization.html#lecture-8-activity-3",
    "title": "Organization of Data Science projects and some useful tools",
    "section": "Lecture 8 Activity 3",
    "text": "Lecture 8 Activity 3",
    "crumbs": [
      "Home",
      "Lecture 8: Organization of Data Science projects and some useful tools"
    ]
  },
  {
    "objectID": "lectures/8-regex-filenames-project-organization.html#basic-matching",
    "href": "lectures/8-regex-filenames-project-organization.html#basic-matching",
    "title": "Organization of Data Science projects and some useful tools",
    "section": "Basic matching",
    "text": "Basic matching\n\nBasic matching: if you look for a regular string, like banana, regex will match the exact string (including its upper/lower case).\nBoth JupyterLab and VS Code have built in regex functionality (bring up the search box and click the .* symbol to use regex rather than the default search).\nWhen learning regex it is helpful to use one of the two webtools mentioned in the previous cell in order to visualize how your regex is matching the text.\nFor this lecture, we will use a list of fruits to learn about regex.\n\napplesas apple apricot banana bilberry blackberry blackcurrant blood orange blueberry canary melon cantaloupe cherry clementine cloudberry coconut cranberry cucumber currant dragonfruit durian elderberry gooseberry grape grapefruit papaya passionfruit peach orange oranges unripe persimmon pineapple pomegranate pomelo purple mangosteen rock melon salal berry satsuma star fruit strawberry watermelon",
    "crumbs": [
      "Home",
      "Lecture 8: Organization of Data Science projects and some useful tools"
    ]
  },
  {
    "objectID": "lectures/8-regex-filenames-project-organization.html#the-square-brackets",
    "href": "lectures/8-regex-filenames-project-organization.html#the-square-brackets",
    "title": "Organization of Data Science projects and some useful tools",
    "section": "The square brackets: []",
    "text": "The square brackets: []\n\nIf you want to specify the set of possible characters you can use square brackets [];\nFor example, [Aa]pple would match Apple and apple.\n\n\n\nLecture 8 Exercise 1\n\n\nFind all the pairs of vowels in the fruit list.\nHighlight the black box below to see than correct answer (the black box will not show up on GitHub, so download the notebook unless you want the answer displayed) Remember to use one of the websites linked above to help you understand what your regex is matching (https://regexr.com/ or https://regex101.com/).\n\n[aeiou][aeiou]\n\n\n\n\nRanges within []\n\nYou can also define ranges when using brackets. For example:\n\n[A-Z]: will match any upper case letter\n[a-z]: will match any lower case letter\n[0-9]: will match any digit\n[0-5]: will match any digit between 0 and 5\n\nThe order cannot be reversed, [z-A] does not work.\nYou can combine ranges: [A-Za-z].\nYou can use square brackets starting with a caret. For example:\n\n[^A-Z]: will match anything that is not an upper case letter\n[^0-9]: will match anything that is not a digit\nNote that the caret needs to be inside the bracket, if it is outside it will match the beginning of a line as described under the “Anchors” section below.\n\nFor the curious, these ranges are ordered based on ASCI codes where every character is represented by a number. The first character in the list is  (space) and the last is ~ (tilde). The full list is shown below:\n !\"#$%&'()*+,-./0123456789:;&lt;=&gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~",
    "crumbs": [
      "Home",
      "Lecture 8: Organization of Data Science projects and some useful tools"
    ]
  },
  {
    "objectID": "lectures/8-regex-filenames-project-organization.html#special-matching-characters",
    "href": "lectures/8-regex-filenames-project-organization.html#special-matching-characters",
    "title": "Organization of Data Science projects and some useful tools",
    "section": "Special matching characters",
    "text": "Special matching characters\n\nA common operation is to match any character (e.g. between two important characters).\nInstead of writing out the full range [ -~] (space to tilde), the special character . can be used to match any character in the list above.\n\nNote that . does not match the newline character, so if you have an expression that continues on the next line it will not be matched.\n\nTo match a literal . (the period character), you can “escape” its special meaning by prefacing it with a backslash \\. (most common) or surrounding it with square brackets [.].\nAnother useful special character is \\w, which matches any character that normally occurs inside a word (so it does not match spaces, underlines, etc)\n\n\n\nLecture 8 Exercise 2\n\n\nWhat is the difference between writing [A-Za-z] and [A-z]?\n\n[A-z] will also match the characters [/]^_, as you can see in the list above.\n\n\n\n\n\nLecture 8 Exercise 3\n\n\nMatch any characters between two _.\n\n_.*_",
    "crumbs": [
      "Home",
      "Lecture 8: Organization of Data Science projects and some useful tools"
    ]
  },
  {
    "objectID": "lectures/8-regex-filenames-project-organization.html#anchors",
    "href": "lectures/8-regex-filenames-project-organization.html#anchors",
    "title": "Organization of Data Science projects and some useful tools",
    "section": "Anchors",
    "text": "Anchors\n\nThe caret outside the brackets means beginning of line. For example, ^apple will match all lines that start with apple, including apple sauce and apples.\nThe dollar sign $ means end of line, e.g., fruit$ will match lines that end with fruit.\nTo remember this, you can use the mnemonic “Start with power (^) and end with money ($)” (originally from Jenny Bryan).\nAnother useful anchor is \\b, which matches end of word.\n\n\n\nLecture 8 Exercise 4\n\n\nWrite a regex that will match a line that contains only pineapple. (Hint: you cannot just write pineapple - it will not work - why?)\n\n^pineapple$ note that if you use just pineapple, lines that also contain other words would match too.",
    "crumbs": [
      "Home",
      "Lecture 8: Organization of Data Science projects and some useful tools"
    ]
  },
  {
    "objectID": "lectures/8-regex-filenames-project-organization.html#repetitions",
    "href": "lectures/8-regex-filenames-project-organization.html#repetitions",
    "title": "Organization of Data Science projects and some useful tools",
    "section": "Repetitions",
    "text": "Repetitions\n\nTo match multiple of the same character, you can either repeat it or use the following syntax:\n\n{n}: exactly n occurrences\n{n,}: at least n occurrences\n{0,m}: at most m occurrences\n{n,m}: between n and m (inclusive) occurrences\n\n\n\nSpecial repetition characters\n\nThere are some shortcuts for the most common repetitions:\n\n?: means 0 or 1 time ({0,1})\n*: means 0 or more time ({0,})\n+: means 1 or more time ({1,})\n\nFor example, apples? will match apple and apples.\n\nBut apples+ will not match apple or appplesq, but it will match apples, appless, applesss, etc.\n\n\n\n\n\nLecture 8 Exercise 5\n\n\nFind the fruits with names between 10 and 12 characters.\n\n.{10,12}\n\n\n\n\n\nLecture 8 Exercise 6\n\n\nFind the lines with no more than 4 letters.\n\n^.{0,4}$\n\n\n\n\n\nLecture 8 Exercise 7\n\n\nFind all the words that contain at least two consecutive vowels.\n\n[aeiou]{2,} or [aeiou][aeiou]+\n\n\n\n\n\nLecture 8 Exercise 8\n\n\nThis is a bit harder and derives from all previous sections: Match entire words that end in _.\n\n\\w*_\\b\n\n\n\n\n\nAdditional exercises\n\n\n\nGo through the interactive tutorials and practice sessions at https://regexone.com/ that correspond to the topics we have covered during class.\nThe Library Carpentry organization has many regex exercises in all sections of their regex course here https://librarycarpentry.org/lc-data-intro/ (you can just to do the exercises).",
    "crumbs": [
      "Home",
      "Lecture 8: Organization of Data Science projects and some useful tools"
    ]
  },
  {
    "objectID": "lectures/8-regex-filenames-project-organization.html#references",
    "href": "lectures/8-regex-filenames-project-organization.html#references",
    "title": "Organization of Data Science projects and some useful tools",
    "section": "References",
    "text": "References\n[1] Kery, M. B., Radensky, M., Arya, M., John, B. E., & Myers, B. A. (2018, April). The story in the notebook: Exploratory data science using a literate programming tool. In Proceedings of the 2018 CHI Conference on Human Factors in Computing Systems (pp. 1-11).",
    "crumbs": [
      "Home",
      "Lecture 8: Organization of Data Science projects and some useful tools"
    ]
  },
  {
    "objectID": "learning_objectives/lo-ch-01.html",
    "href": "learning_objectives/lo-ch-01.html",
    "title": "DSCI 521: Computing Platforms for Data Science",
    "section": "",
    "text": "Recognize the directory hierarchy as it is commonly represented in diagrams, paths, and file explorer software.\nDistinguish common operators and representations of the different filesystem elements typically used in Bash.\nExplore the filesystem using Bash commands as ls, pwd and cd.\nTranslate an absolute path into a relative path and vice versa.\nUse command-line arguments to produce alternative outputs of commands.\nCreate, edit, move, and delete files and folders using the command line and VS Code."
  },
  {
    "objectID": "learning_objectives/lo-ch-03.html",
    "href": "learning_objectives/lo-ch-03.html",
    "title": "DSCI 521: Computing Platforms for Data Science",
    "section": "",
    "text": "Explore the Git history via git log in the terminal and GitHub.\nCompare commits using git diff in the terminal and GitHub.\nSolve merge conflicts at the command line and in VS Code.\nSave transitory changes with git stash.\nManage to avoid pushing specific local files by including a .gitignore.\nDifferenciate among different ways to restore your project history (git reset --hard/--soft, git revert) when working on an older version of a project."
  },
  {
    "objectID": "learning_objectives/lo-ch-05.html",
    "href": "learning_objectives/lo-ch-05.html",
    "title": "DSCI 521: Computing Platforms for Data Science",
    "section": "",
    "text": "Create RProjects in Rstudio using here to define robust file paths.\nDetect the basic components of a dynamic document in Jupyter Notebooks and in R Markdown\nExplain markdown usage in relation to dynamic documents\nDifferentiate between code chunks and code cells in Rmarkdown and Jupyter Notebooks.\nSelect appropiate code chunk options for RMarkdown.\nUse semantic line breaks for version control files\nSpecify metadata in the YAML header block"
  },
  {
    "objectID": "learning_objectives/lo-ch-07.html",
    "href": "learning_objectives/lo-ch-07.html",
    "title": "DSCI 521: Computing Platforms for Data Science",
    "section": "",
    "text": "Understand what is a computational environment and how can ensure the reproducibility of a project\nDifferenciate Python, Anaconda, MiniConda, Conda and pip\nManage packages and environments in Python using Conda\nManage packages and environments in R using renv"
  },
  {
    "objectID": "readings/readings-ch-02.html",
    "href": "readings/readings-ch-02.html",
    "title": "DSCI 521: Computing Platforms for Data Science",
    "section": "",
    "text": "Excuse me, do you have a moment to talk about version control? by Jenny Bryan\nComparing commits across time\nResolving a merge conflict using the command line\nnbdime – diffing and merging of Jupyter Notebooks"
  },
  {
    "objectID": "readings/readings-ch-03.html",
    "href": "readings/readings-ch-03.html",
    "title": "DSCI 521: Computing Platforms for Data Science",
    "section": "",
    "text": "Comparing commits across time\nResolving a merge conflict using the command line\nnbdime – diffing and merging of Jupyter Notebooks"
  },
  {
    "objectID": "readings/readings-ch-05.html",
    "href": "readings/readings-ch-05.html",
    "title": "DSCI 521: Computing Platforms for Data Science",
    "section": "",
    "text": "Using RStudio Projects\nR Markdown Cheat Sheet\nR Markdown home page\nR Markdown: The Definitive Guide\nR Markdown code chunk options\nWhat they forgot to teach you about R\nConnect RStudio to Git and GitHub\nR-cubed rostools workshop"
  },
  {
    "objectID": "readings/readings-ch-07.html",
    "href": "readings/readings-ch-07.html",
    "title": "DSCI 521: Computing Platforms for Data Science",
    "section": "",
    "text": "conda environemnts\nrenv\nWorkflow: projects"
  },
  {
    "objectID": "lectures/2-git-github-ssh-basic-workflow.html#learning-outcomes",
    "href": "lectures/2-git-github-ssh-basic-workflow.html#learning-outcomes",
    "title": "Introduction to version control with Git and GitHub",
    "section": "",
    "text": "Implement SSH authentication\nDifferentiate between the use of GitHub as a remote hosting service for version control and Git as a version control system.\nCreate a Git repository.\nImplement Git’s clone, add, status, commit, pull, and push operations on the command line and their equivalent use in VS Code.\nUnderstand what implies using the staging area in a Git workflow.\nRecognize the commit as the primary building block for storing a project version characterized by an attached message and a hash that serves as a unique identifier.",
    "crumbs": [
      "Home",
      "Lecture 2: Introduction to version control with Git and GitHub"
    ]
  },
  {
    "objectID": "lectures/2-git-github-ssh-basic-workflow.html#different-type-of-keys",
    "href": "lectures/2-git-github-ssh-basic-workflow.html#different-type-of-keys",
    "title": "Introduction to version control with Git and GitHub",
    "section": "Different type of keys",
    "text": "Different type of keys\nThere may be different methods of how to generate private-public key pairs.\nThe GitHub SSH key generation instructions uses the -t flag to indicate the “type” of key to create, in thier instructions they use the ed25519 algorithm to create private and public values.\nThe general premice to SSH keys is the same, there is a private key that stays on your machine and is never shared with other people, and the public key you can freely share that will be used to authenticate the machine with the private key on it.\n\nAuthentication vs. encryption\nThe system described above focuses solely on authentication. In this process, the client must demonstrate to the server that it is authorized to access the server. This is established when someone with the necessary authority adds the client’s public key to the ~/.ssh/authorized_keys on the server. Once this is done, the server will grant access to anyone who possesses a private key that matches one of the public keys listed.\nThis authentication process is distinct from the encryption of data transmitted between the client and server. Encryption ensures that the communication between the client and server remains confidential, preventing any potential eavesdroppers from intercepting or listening to the exchange.",
    "crumbs": [
      "Home",
      "Lecture 2: Introduction to version control with Git and GitHub"
    ]
  },
  {
    "objectID": "lectures/4-quarto_github_pages.html#learning-outcomes",
    "href": "lectures/4-quarto_github_pages.html#learning-outcomes",
    "title": "Introduction to Quarto and Github Pages",
    "section": "",
    "text": "Use the quarto terminal command to create different quarto projects\nCreate and edit a Quarto website\nDiscover how GitHub can be used to serve static websites\nModify a GitHub repository to publish a website",
    "crumbs": [
      "Home",
      "Lecture 4: Introduction to Quarto and Github Pages"
    ]
  },
  {
    "objectID": "lectures/3-git-history-merge-conflicts-stash.html#learning-outcomes",
    "href": "lectures/3-git-history-merge-conflicts-stash.html#learning-outcomes",
    "title": "Getting grovy with Git and GitHub",
    "section": "",
    "text": "Explore the Git history via git log in the terminal and GitHub.\nCompare commits using git diff in the terminal and GitHub.\nSolve merge conflicts at the command line and in VS Code.\nSave transitory changes with git stash.\nManage to avoid pushing specific local files by including a .gitignore.\nDifferenciate among different ways to restore your project history (git reset --hard/--soft, git revert) when working on an older version of a project.\n\nLecture 3 \nYou clone a project you want to start collaborating in. How you can see the",
    "crumbs": [
      "Home",
      "Lecture 3: Getting grovy with Git and GitHub"
    ]
  },
  {
    "objectID": "lectures/5-rstudio-projects-notebooks.html#learning-outcomes",
    "href": "lectures/5-rstudio-projects-notebooks.html#learning-outcomes",
    "title": "Dynamic documents: from markdown to Rmarkdown documents",
    "section": "",
    "text": "Create RProjects in Rstudio using here to define robust file paths.\nDetect the basic components of a dynamic document in Jupyter Notebooks and in R Markdown\nExplain markdown usage in relation to dynamic documents\nDifferentiate between code chunks and code cells in Rmarkdown and Jupyter Notebooks.\nSelect appropiate code chunk options for RMarkdown.\nUse semantic line breaks for version control files\nSpecify metadata in the YAML header block\n\nPlatform in focus RStudio IDE",
    "crumbs": [
      "Home",
      "Lecture 5: Dynamic documents: from markdown to Rmarkdown documents"
    ]
  },
  {
    "objectID": "lectures/6-rmarkdown-quarto-slides-ghpages.html#learning-outcomes",
    "href": "lectures/6-rmarkdown-quarto-slides-ghpages.html#learning-outcomes",
    "title": "Quarto, RMarkdown, and Jupyter Slides",
    "section": "",
    "text": "Understand how Quarto extend RMarkdown documents functionalities.\nExplore different data science products to communicate your results: slides, blogs and books.\nCreate slides using Jupyter Notebook and Quarto slides with reveal.js\nCreate a Jupyter Book and a Quarto books.\nCreate a Quarto Blog.\nSharing rendered HTML files publicly via GitHub Pages.\n\nPlatform in focus RStudio IDE + Quarto",
    "crumbs": [
      "Home",
      "Lecture 6: Quarto, RMarkdown, and Jupyter Slides"
    ]
  },
  {
    "objectID": "lectures/8-regex-filenames-project-organization.html#learning-outcomes",
    "href": "lectures/8-regex-filenames-project-organization.html#learning-outcomes",
    "title": "Organization of Data Science projects and some useful tools",
    "section": "",
    "text": "Understand what is a computational environment and how can ensure the reproducibility of a project\nDifferenciate Python, Anaconda, MiniConda, Conda and pip\nManage packages and environments in Python using Conda\nManage packages and environments in R using renv",
    "crumbs": [
      "Home",
      "Lecture 8: Organization of Data Science projects and some useful tools"
    ]
  },
  {
    "objectID": "lectures/7-virtual-environments.html#learning-outcomes",
    "href": "lectures/7-virtual-environments.html#learning-outcomes",
    "title": "Virtual environments",
    "section": "",
    "text": "Understand what is a computational environment and how can ensure the reproducibility of a project\nDifferenciate Python, Anaconda, MiniConda, Conda and pip\nManage packages and environments in Python using Conda\nManage packages and environments in R using renv",
    "crumbs": [
      "Home",
      "Lecture 7: Virtual environments"
    ]
  },
  {
    "objectID": "lectures/2-git-github-ssh-basic-workflow.html#setting-up-and-remotely-accessing-ssh-keys-for-use-with-github",
    "href": "lectures/2-git-github-ssh-basic-workflow.html#setting-up-and-remotely-accessing-ssh-keys-for-use-with-github",
    "title": "Introduction to version control with Git and GitHub",
    "section": "Setting Up and Remotely Accessing SSH Keys for Use with GitHub",
    "text": "Setting Up and Remotely Accessing SSH Keys for Use with GitHub\nLet’s start with some definitions:\n\nDefinitions\nSecure SHell (SSH) ssh is a secure method commonly used for remotely logging into another computer.\nThe server is the machine you are connecting to via SSH, which passively waits for incoming connections.\nThe client is usually your own machine, which initiates the contact with the server.",
    "crumbs": [
      "Home",
      "Lecture 2: Introduction to version control with Git and GitHub"
    ]
  },
  {
    "objectID": "lectures/2-git-github-ssh-basic-workflow.html#what-are-some-password-based-authentication",
    "href": "lectures/2-git-github-ssh-basic-workflow.html#what-are-some-password-based-authentication",
    "title": "Introduction to version control with Git and GitHub",
    "section": "What are some password-based authentication",
    "text": "What are some password-based authentication\nPasswords are often short and relatively easy to guess or “break.” For instance, consider a password with 12 characters, where each character can be one of 26 uppercase letters, 26 lowercase letters, 10 digits, or approximately 10 special characters. This results in around 70 possible choices per character, making the total number of possible combinations approximately \\(70^{12}\\approx 10^{22}\\). While this is an extraordinarily large number, patterns in password creation can make them more predictable and easier to guess. More detailed discussions on security and privacy will be covered in future courses.",
    "crumbs": [
      "Home",
      "Lecture 2: Introduction to version control with Git and GitHub"
    ]
  },
  {
    "objectID": "lectures/2-git-github-ssh-basic-workflow.html#creating-a-repository",
    "href": "lectures/2-git-github-ssh-basic-workflow.html#creating-a-repository",
    "title": "Introduction to version control with Git and GitHub",
    "section": "Creating a Repository",
    "text": "Creating a Repository\nWe can create a repository one of two ways:\n\nStart on GitHub and then clone the repository to your local computer using Git.\nStart in a folder on your local computer, use Git to initialize it as a Git repository (by typing git init inside the directory). Then create a new repository on GitHub without adding any files. Then use Git to tell your local computer where the remote is (i.e., the location of the empty GitHub repository on GitHub).\n\nYou can see the second method requires more work. So the first method is usually the most convenient and it is sufficient for you to only use this approach.",
    "crumbs": [
      "Home",
      "Lecture 2: Introduction to version control with Git and GitHub"
    ]
  }
]